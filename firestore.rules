/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /categories/{categoryId}: Stores categories for documents. Publicly readable.
 * - /tags/{tagId}: Stores tags for documents. Publicly readable.
 * - /documents/{documentId}: Stores document metadata. Publicly readable.
 * - /roles_admin/{userId}: Used to grant admin privileges based on the existence of a document.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listing of all users is denied to prevent information disclosure.
 * - Categories, Tags, and Documents are publicly readable, but writes are not permitted in this prototyping phase.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Data validation is minimal to allow for rapid prototyping. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.  This avoids the need for complex role lookups during rule evaluation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by checking for a document in `/roles_admin/{userId}`.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Unauthenticated users cannot create user profiles.
     * @deny (update, delete) - Non-owners cannot update or delete user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - All users can read categories.
     * @deny (create, update, delete) - No one can create, update, or delete categories in this prototype.
     * @principle Public read access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write access later.
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) - All users can read tags.
     * @deny (create, update, delete) - No one can create, update, or delete tags in this prototype.
     * @principle Public read access for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write access later.
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) - All users can read documents.
     * @deny (create, update, delete) - No one can create, update, or delete documents in this prototype.
     * @principle Public read access for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write access later.
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @principle Grants admin privileges based on the existence of a document in this collection.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}
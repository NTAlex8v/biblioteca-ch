/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for users and folders, 
 * with public read access for categories, tags, and documents, but only allows authorized users to write.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner.
 * - /categories/{categoryId}: Stores category metadata. Publicly readable, writeable by authorized users.
 * - /folders/{folderId}: Stores folder metadata. Owned by a user, access restricted to the owner.
 * - /tags/{tagId}: Stores tag metadata. Publicly readable, writeable by authorized users.
 * - /documents/{documentId}: Stores document metadata. Publicly readable, writeable by authorized users and creators.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Categories, tags, and documents are publicly readable to allow browsing.
 * - Folders are owned by users and only accessible to them.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Documents include a `createdBy` field to determine ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

    /**
     * @description Allows the user to create their own user document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates /users/user123
     * @deny (create) User with ID 'user123' creates /users/user456
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read categories, but only authorized users to create, update, or delete.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) Unauthorized users cannot modify categories.
     * @principle Allows public reads with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
       /**
     * @description Allows a user to create, read, update, and delete their own folders.
     * @path /folders/{folderId}
     * @allow (create) User with ID 'user123' creates a folder with createdBy = 'user123'.
     * @allow (get, list) User with ID 'user123' reads all folders where createdBy = 'user123'.
     * @deny (create) User with ID 'user123' creates a folder with createdBy = 'user456'.
     * @deny (get, list) User with ID 'user123' reads folders where createdBy != 'user123'.
     * @principle Enforces user-ownership for folders.
     */
    match /folders/{folderId} {
      allow get: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Allows anyone to read tags, but only authorized users to create, update, or delete.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tag data.
     * @deny (create, update, delete) Unauthorized users cannot modify tags.
     * @principle Allows public reads with restricted writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read documents, but only the creator to update or delete.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read document data.
     * @allow (create) User can create a document if the createdBy field matches their UID.
     * @deny (update, delete) Only the creator can update/delete the document.
     * @principle Allows public reads with owner-only writes, enforced by the createdBy field.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
    }
  }
}
/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, allows public read access to categories, tags, and documents, and restricts write access to authorized users. Administrative roles are managed through the `roles_admin` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /categories/{categoryId}: Stores category data, publicly readable.
 * - /tags/{tagId}: Stores tag data, publicly readable.
 * - /documents/{documentId}: Stores document data, publicly readable, writeable by owner.
 * - /roles_admin/{userId}: Indicates admin privileges for a user; presence of a document grants admin access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Read-only collections (categories, tags, documents) are publicly readable to allow for a seamless browsing experience.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`, avoiding the need for complex queries.
 *
 * Structural Segregation:
 *  - Administrative roles are stored in a separate collection (`roles_admin`) to enable secure filtering based on role membership without exposing sensitive data in the user documents themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the authenticated user is an existing owner of a resource.
     *              Combines ownership check with existence check to prevent operations on non-existent documents.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user has admin privileges.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can create their own profile.
     * @deny (create) User 'attackerId' cannot create a profile for user 'victimId'.
     * @allow (get) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can get their profile.
     * @deny (get) User 'attackerId' cannot get profile for user 'victimId'.
     * @allow (update) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can update their own profile.
     * @deny (update) User 'attackerId' cannot update the profile of user 'victimId'.
     * @allow (delete) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can delete their own profile.
     * @deny (delete) User 'attackerId' cannot delete the profile of user 'victimId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @deny (create) Only admins can create categories.
     * @deny (update) Only admins can update categories.
     * @deny (delete) Only admins can delete categories.
     * @principle Public read access, admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for tags.
     * @path /tags/{tagId}
     * @allow (get) Any user can read a tag.
     * @allow (list) Any user can list tags.
     * @deny (create) Only admins can create tags.
     * @deny (update) Only admins can update tags.
     * @deny (delete) Only admins can delete tags.
     * @principle Public read access, admin-only writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for documents.
     * @path /documents/{documentId}
     * @allow (get) Any user can read a document.
     * @allow (list) Any user can list documents.
     * // CRITICAL: Cannot implement owner-only writes. The 'Document' entity is missing an 'ownerId' or 'authorId' field.
     * allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read access, owner-only writes (currently unimplemented).
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only a service account (or other trusted source) can grant admin roles.
     * @allow (get) Any authenticated user can check if they have admin role.
     * @allow (list) No one can list documents in the `/roles_admin` collection.
     * @deny (update) No one can update admin roles through the client.
     * @deny (delete) Only a service account (or other trusted source) can revoke admin roles.
     * @principle Database-Based Access Control (DBAC): The presence of a document in this collection grants admin privileges.
     */
    match /roles_admin/{userId} {
        allow create: if false; // Only trusted server environments
        allow get: if isSignedIn() && request.auth.uid == userId;
        allow list: if false;
        allow update: if false; // No one can update roles
        allow delete: if false; // Only trusted server environments
    }
  }
}
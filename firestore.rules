rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helpers
    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is authenticated, false otherwise.
     */
    function isAuthenticated() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user has the 'Admin' role.
     * @returns {boolean} True if the user is an Admin, false otherwise.
     * @example
     * // ALLOW: An admin attempts to read a user document.
     * // DENY: A regular user attempts to read a user document, but is not an Admin.
     * @principle Role-based access control.
     */
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }

    /**
     * @description Checks if the requesting user has the 'Editor' role.
     * @returns {boolean} True if the user is an Editor, false otherwise.
     * @example
     * // ALLOW: An editor attempts to update a document.
     * // DENY: A regular user attempts to update a document, but is not an Editor.
     * @principle Role-based access control.
     */
    function isEditor() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Editor";
    }

    /**
     * @description Checks if the requesting user has either the 'Admin' or 'Editor' role.
     * @returns {boolean} True if the user is an Admin or Editor, false otherwise.
     * @example
     * // ALLOW: An admin attempts to create a category.
     * // ALLOW: An editor attempts to create a category.
     * // DENY: A regular user attempts to create a category.
     * @principle Role-based access control.
     */
    function isAdminOrEditor() {
      return isAdmin() || isEditor();
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     * @example
     * // ALLOW: A user attempts to read their own profile.
     * // DENY: A user attempts to read another user's profile.
     * @principle Ownership-based access control.
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     * @example
     * // ALLOW: A user attempts to delete their own profile.
     * // DENY: A user attempts to delete another user's profile.
     * // DENY: A user attempts to delete a non-existent profile.
     * @principle Ownership-based access control and existence check.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (list) If the user is an Admin.
     * @allow (get) If the user is the owner of the document or an Admin.
     * @allow (create, update, delete) If the user is the owner of the document or an Admin.
     * @deny (list) If the user is not an Admin.
     * @deny (get, create, update, delete) If the user is not the owner of the document or an Admin.
     * @principle Enforces document ownership and role-based access control for user profiles.
     */
    match /users/{userId} {
      // Only Admins can list all users
      allow list: if isAdmin();

      // Read: owner of the document or Admin
      allow get: if isOwner(userId) || isAdmin();

      // Create/edit/delete: owner of the document or Admin
      allow create, update, delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for document entities. Documents are publicly readable, but only admins and editors can modify them.
     * @path /documents/{docId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) If the user has the Admin or Editor role.
     * @deny (create, update, delete) If the user does not have the Admin or Editor role.
     * @principle Allows public read access to documents, but restricts write access to authorized roles.
     */
    match /documents/{docId} {
      // Public read: anyone can list and read
      allow get, list: if true;

      // Writes only Admin/Editor
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Rules for category entities. Categories are publicly readable, but only admins and editors can modify them.
     * @path /categories/{catId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) If the user has the Admin or Editor role.
     * @deny (create, update, delete) If the user does not have the Admin or Editor role.
     * @principle Allows public read access to categories, but restricts write access to authorized roles.
     */
    match /categories/{catId} {
      // Public read: anyone can list and read
      allow get, list: if true;

      // Writes restricted to Admin/Editor
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Rules for tag entities. Tags are readable by authenticated users, and only admins and editors can modify them.
     * @path /tags/{tagId}
     * @allow (get, list) If the user is authenticated.
     * @allow (create, update, delete) If the user has the Admin or Editor role.
     * @deny (get, list) If the user is not authenticated.
     * @deny (create, update, delete) If the user does not have the Admin or Editor role.
     * @principle Restricts tag access to authenticated users and write access to authorized roles.
     */
    match /tags/{tagId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Fallback rule to deny all other requests.
     * @path /{document=**}
     * @deny (read, write) All requests.
     * @principle Default-deny security posture.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
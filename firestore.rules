/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It allows public read access to certain collections, while restricting write access
 * to authorized users. The ruleset is designed to be adaptable for rapid prototyping,
 * focusing on authorization and access control, while relaxing data shape validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /categories/{categoryId}: Stores top-level categories, publicly readable, but only
 *   modifiable by admins (not implemented in this version due to missing role information).
 * - /folders/{folderId}: Stores user-created folders, publicly readable, writable by owner.
 * - /tags/{tagId}: Stores tags, publicly readable. Write operations restricted for authorized users.
 * - /documents/{documentId}: Stores document metadata, publicly readable, writable by owner.
 * - /auditLogs/{logId}: Stores audit logs, only readable by admins.
 *
 * Key Security Decisions:
 * - Public read access is granted to /categories, /folders, /tags, and /documents to allow unauthenticated users to list and get.
 * - Write access to collections is restricted based on ownership (where applicable).
 * - No user listing is allowed to protect user privacy.
 * - Data validation is relaxed to allow for rapid schema evolution during prototyping.
 *
 * Denormalization for Authorization:
 *  - Documents and Folders are secured using the `createdBy` field, which must match the authenticated user's UID for write operations.
 *  - This avoids needing to `get()` the user document to verify ownership.
 *
 * Structural Segregation:
 *  - The application uses separate collections for public (categories, folders, tags, documents)
 *    and private data (user profiles).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     */
    function isExistingOwner(ownerId) {
      return isOwner(ownerId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is creating a document and is setting ownership field to request.auth.uid.
     */
    function isCreatingOwnedBy(ownershipField) {
      return isSignedIn() && request.resource.data[ownershipField] == request.auth.uid;
    }

    /**
     * @description Enforces that a field can only be set on create, or remains equal if it exists on update.
     */
    function isImmutable(field) {
        return !(field in resource.data) || request.resource.data[field] == resource.data[field];
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (update) User with UID 'user456' cannot update user123's profile.
     * @deny (delete) Only the user can delete their profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No user listing allowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && isImmutable('id');
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for categories.
     * @path /categories/{categoryId}
     * @allow (get) Anyone can read categories.
     * @allow (list) Anyone can list categories.
     * @deny (create) Only admins can create categories.
     * @deny (update) Only admins can update categories.
     * @deny (delete) Only admins can delete categories.
     * @principle Public read access with restricted write access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Security rules for folders.
     * @path /folders/{folderId}
     * @allow (get) Anyone can read folders.
     * @allow (list) Anyone can list folders.
     * @allow (create) User can create a folder with their UID in createdBy field.
     * @allow (update) Only the owner can update the folder.
     * @allow (delete) Only the owner can delete the folder.
     * @principle Owner-only write access with public read access.
     */
    match /folders/{folderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCreatingOwnedBy('createdBy');
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Security rules for tags.
     * @path /tags/{tagId}
     * @allow (get) Anyone can read tags.
     * @allow (list) Anyone can list tags.
     * @deny (create) Only admins can create tags.
     * @deny (update) Only admins can update tags.
     * @deny (delete) Only admins can delete tags.
     * @principle Public read access with restricted write access.
     */
    match /tags/{tagId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Security rules for documents.
     * @path /documents/{documentId}
     * @allow (get) Anyone can read documents.
     * @allow (list) Anyone can list documents.
     * @allow (create) User can create a document with their UID in createdBy field.
     * @allow (update) Only the owner can update the document.
     * @allow (delete) Only the owner can delete the document.
     * @principle Owner-only write access with public read access.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCreatingOwnedBy('createdBy');
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

     /**
      * @description Security rules for audit logs.
      * @path /auditLogs/{logId}
      * @deny (get) Only admins can read audit logs.
      * @deny (list) Only admins can list audit logs.
      * @deny (create) Only admins can create audit logs.
      * @deny (update) No one can update audit logs.
      * @deny (delete) No one can delete audit logs.
      * @principle Restricted access to audit logs.
      */
    match /auditLogs/{logId} {
      allow get: if false; // TODO: Add admin role check
      allow list: if false; // TODO: Add admin role check
      allow create: if false; // TODO: Add admin role check
      allow update: if false;
      allow delete: if false;
    }
  }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with document ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the user and admins.
 * - /categories/{categoryId}: Stores categories; managed only by admins.
 * - /folders/{folderId}: Stores folders; created and managed by individual users.
 * - /tags/{tagId}: Stores tags; publicly accessible.
 * - /documents/{documentId}: Stores documents; created and managed by individual users.
 * - /auditLogs/{logId}: Stores audit logs; only admins can read all logs.
 *
 * Key Security Decisions:
 * - Only admins can create or modify categories.
 * - Users can only create, modify, or delete their own folders and documents.
 * - Tags are globally accessible for reading but writes are not permitted
 * - Users can only read their own audit logs
 * - Listing all users is disallowed except for Admin roles
 *
 * Denormalization for Authorization:
 * - Documents and Folders include a `createdBy` field to track ownership.
 *
 * Structural Segregation:
 * - No explicit structural segregation is used.  All data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data, ensuring only the user or an admin can read/write.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId}
     * @allow (create) User creating their own profile
     * @allow (list) Admin user listing all users
     * @deny (get, update, delete) Other users trying to access this data
     * @deny (create) Non-authenticated users
     * @principle Enforces user ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts category management to admins only.
     * @path /categories/{categoryId}
     * @allow (get, list) Public access for all users
     * @allow (create, update, delete) Admin users managing categories
     * @deny (create, update, delete) Non-admin users attempting to manage categories
     * @principle Limits category modifications to authorized personnel.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows users to manage their own folders within categories.
     * @path /folders/{folderId}
     * @allow (get, list) Authenticated users.
     * @allow (create, update, delete) Users creating, updating or deleting their own folders
     * @deny (create, update, delete) Other users attempting to modify these folders
     * @principle Enforces user ownership of folders and prevents unauthorized modifications.
     */
    match /folders/{folderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Grants public read access to tags, but prevents any modifications.
     * @path /tags/{tagId}
     * @allow (get, list) Public access for all users
     * @deny (create, update, delete) All write operations on tags
     * @principle Provides open access to tags while restricting modifications.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own documents.
     * @path /documents/{documentId}
     * @allow (get, list) Public access for all users
     * @allow (create, update, delete) Users creating, updating or deleting their own documents
     * @deny (create, update, delete) Other users attempting to modify these documents
     * @principle Enforces user ownership of documents and prevents unauthorized modifications.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

     /**
      * @description Allows admins to read all audit logs, and users to read only their own.
      * @path /auditLogs/{logId}
      * @allow (get, list) Admin users managing categories
      * @deny (create, update, delete) All users.
      * @principle Admins can read all audit logs, and users can read only their own.
      */
    match /auditLogs/{logId} {
       allow get, list: if isSignedIn() && isAdmin();
       allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }
  }
}
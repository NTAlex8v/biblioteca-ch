/**
 * @file Firestore Security Rules
 * @description Role-based access control.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can manage their own data, while admins have elevated privileges.
 *
 * Data Structure:
 * - /users/{userId}: User profile information; accessible to the user and admins.
 * - /categories/{categoryId}: Top-level categories; publicly readable, admin-writable.
 * - /folders/{folderId}: User-created folders; accessible to the owner.
 * - /tags/{tagId}: Tags for cross-classification; publicly readable, admin-writable.
 * - /documents/{documentId}: Document details; publicly readable, owner-writable.
 * - /auditLogs/{logId}: System audit logs; accessible only to admins.
 *
 * Key Security Decisions:
 * - Public read access to categories, tags and documents.
 * - Admin role is determined by checking the 'role' field in the user's document.
 * - Data consistency is enforced between the path and the document's internal ID for user documents.
 *
 * Denormalization for Authorization:
 * - The 'createdBy' field is used in /folders and /documents to establish ownership.
 *
 * Structural Segregation:
 * - No explicit segregation between public and private data is implemented as public read access is enabled for some collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and that the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role by reading their user document.
     */
    function isAdmin() {
      // 1. Asegura que el usuario esté autenticado.
      return isSignedIn() &&
      // 2. Obtiene el documento de perfil del usuario que hace la petición.
             get(/databases/$(database)/documents/users/$(request.auth.uid))
      // 3. Accede a los datos de ese documento y comprueba el campo 'role'.
                .data.role == 'Admin';
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) User A can read their own profile: auth.uid == 'userA'
     * @allow (get) An admin can read User A's profile: isAdmin() == true
     * @deny (get) User B cannot read User A's profile: auth.uid == 'userB'
     * @allow (list) An admin can list all users: isAdmin() == true
     * @deny (list) A non-admin user cannot list all users: isAdmin() == false
     * @allow (create) User A can create their own profile if the ID matches: auth.uid == 'userA' && request.resource.data.id == 'userA'
     * @allow (create) An admin can create any user profile: isAdmin() == true
     * @deny (create) User A cannot create a profile with a mismatched ID: auth.uid == 'userA' && request.resource.data.id != 'userA'
     * @allow (update) User A can update their own profile if the ID is not changed: auth.uid == 'userA' && resource.data.id == 'userA' && request.resource.data.id == 'userA'
     * @allow (update) An admin can update any user profile: isAdmin() == true
     * @deny (update) User A cannot change their own ID: auth.uid == 'userA' && request.resource.data.id != 'userA'
     * @allow (delete) User A can delete their own profile: auth.uid == 'userA'
     * @allow (delete) An admin can delete any user profile: isAdmin() == true
     * @deny (delete) User B cannot delete User A's profile: auth.uid == 'userB'
     * @principle Enforces document ownership for users, but allows full access for Admins. Validates relational integrity between path and document id on create and enforces immutability of the id on update.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if (isOwner(userId) && request.resource.data.id == userId) || isAdmin();
      allow update: if (isExistingOwner(userId) && request.resource.data.id == resource.data.id) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get) Anyone can read a category: true
     * @allow (list) Anyone can list categories: true
     * @allow (create) An admin can create a category: isAdmin() == true
     * @deny (create) A non-admin user cannot create a category: isAdmin() == false
     * @allow (update) An admin can update a category: isAdmin() == true
     * @deny (update) A non-admin user cannot update a category: isAdmin() == false
     * @allow (delete) An admin can delete a category: isAdmin() == true
     * @deny (delete) A non-admin user cannot delete a category: isAdmin() == false
     * @principle Admin-only write access, public read access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /folders/{folderId} collection.
     * @path /folders/{folderId}
     * @allow (get) User A can read a folder they created: isSignedIn() == true && resource.data.createdBy == 'userA'
     * @deny (get) User A cannot read a folder if not signed in: isSignedIn() == false
     * @deny (get) User B cannot read a folder created by User A: isSignedIn() == true && resource.data.createdBy == 'userA' && auth.uid == 'userB'
     * @allow (list) Any signed in user can list folders: isSignedIn() == true
     * @deny (list) Unauthenticated user can't list folders: isSignedIn() == false
     * @allow (create) User A can create a folder with their ID: isSignedIn() == true && request.resource.data.createdBy == 'userA'
     * @deny (create) User A cannot create a folder if not signed in: isSignedIn() == false
     * @deny (create) User B cannot create a folder with User A's ID: isSignedIn() == true && request.resource.data.createdBy == 'userA' && auth.uid == 'userB'
     * @allow (update) User A can update their own folder and createdBy is the same: isExistingOwner(resource.data.createdBy) == true && resource.data.createdBy == resource.data.createdBy
     * @deny (update) User B cannot update User A's folder: isExistingOwner(resource.data.createdBy) == false
     * @allow (delete) User A can delete their own folder: isExistingOwner(resource.data.createdBy) == true
     * @deny (delete) User B cannot delete User A's folder: isExistingOwner(resource.data.createdBy) == false
     * @principle Enforces document ownership for all operations.
     */
    match /folders/{folderId} {
      allow get: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow list: if isSignedIn();

      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && resource.data.createdBy == request.resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get) Anyone can read a tag: true
     * @allow (list) Anyone can list tags: true
     * @allow (create) An admin can create a tag: isAdmin() == true
     * @deny (create) A non-admin user cannot create a tag: isAdmin() == false
     * @allow (update) An admin can update a tag: isAdmin() == true
     * @deny (update) A non-admin user cannot update a tag: isAdmin() == false
     * @allow (delete) An admin can delete a tag: isAdmin() == true
     * @deny (delete) A non-admin user cannot delete a tag: isAdmin() == false
     * @principle Admin-only write access, public read access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /documents/{documentId} collection.
     * @path /documents/{documentId}
     * @allow (get) Anyone can read a document: true
     * @allow (list) Anyone can list documents: true
     * @allow (create) User A can create a document with their ID: isSignedIn() == true && request.resource.data.createdBy == 'userA'
     * @deny (create) User A cannot create a document if not signed in: isSignedIn() == false
     * @deny (create) User B cannot create a document with User A's ID: isSignedIn() == true && request.resource.data.createdBy == 'userA' && auth.uid == 'userB'
     * @allow (update) User A can update their own document and createdBy is the same: isExistingOwner(resource.data.createdBy) == true  && resource.data.createdBy == resource.data.createdBy
     * @deny (update) User B cannot update User A's document: isExistingOwner(resource.data.createdBy) == false
     * @allow (delete) User A can delete their own document: isExistingOwner(resource.data.createdBy) == true
     * @deny (delete) User B cannot delete User A's document: isExistingOwner(resource.data.createdBy) == false
     * @principle Public read access, owner-only write access.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && resource.data.createdBy == request.resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Rules for the /auditLogs/{logId} collection.
     * @path /auditLogs/{logId}
     * @allow (get) Only admins can read an audit log: isAdmin() == true
     * @deny (get) Non-admins cannot read audit logs: isAdmin() == false
     * @allow (list) Only admins can list audit logs: isAdmin() == true
     * @deny (list) Non-admins cannot list audit logs: isAdmin() == false
     * @allow (create) Only admins can create an audit log: isAdmin() == true
     * @deny (create) Non-admins cannot create audit logs: isAdmin() == false
     * @allow (update) Only admins can update an audit log: isAdmin() == true
     * @deny (update) Non-admins cannot update audit logs: isAdmin() == false
     * @allow (delete) Only admins can delete an audit log: isAdmin() == true
     * @deny (delete) Non-admins cannot delete audit logs: isAdmin() == false
     * @principle Admin-only access.
     */
    match /auditLogs/{logId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}
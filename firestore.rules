/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model:
 * - User profiles are private and accessible only to the owning user.
 * - Categories and Tags are public read-only.
 * - Documents and Folders are owner-created and publicly readable.
 * - Audit Logs are globally readable by admins only.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /categories/{categoryId}: Top-level categories.
 * - /folders/{folderId}: Folders for organizing documents.
 * - /tags/{tagId}: Tags for classifying documents.
 * - /documents/{documentId}: Document metadata and file URLs.
 * - /auditLogs/{logId}: Audit logs for tracking changes.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Categories and Tags are publicly readable but not writable through the client.
 * - Documents and Folders are publicly readable, but creation, updates, and deletion are restricted to the owner (creator).
 * - Audit Logs are readable by admins only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     * @param {string} userId The user ID to check against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Matches the /users/{userId} path to secure user profile data.
     * @path /users/{userId}
     * @allow (create) User 'testUser' with ID 'testUser' can create their profile.
     * @deny (create) User 'otherUser' cannot create a profile for 'testUser'.
     * @allow (get) User 'testUser' can read their profile.
     * @deny (get) User 'otherUser' cannot read 'testUser' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /categories/{categoryId} path to secure top-level categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read categories.
     * @deny (create) No client-side creation allowed.
     * @principle Categories are publicly readable.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Matches the /folders/{folderId} path to secure user-created folders.
     * @path /folders/{folderId}
     * @allow (get) Any user can read folders.
     * @allow (create) User 'testUser' can create a folder with creatorId = 'testUser'.
     * @deny (create) User 'testUser' cannot create a folder with creatorId = 'otherUser'.
     * @deny (update) User 'otherUser' cannot update a folder owned by 'testUser'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /folders/{folderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Matches the /tags/{tagId} path to secure tags.
     * @path /tags/{tagId}
     * @allow (get) Any user can read tags.
     * @deny (create) No client-side creation allowed.
     * @principle Tags are publicly readable.
     */
    match /tags/{tagId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Matches the /documents/{documentId} path to secure documents.
     * @path /documents/{documentId}
     * @allow (get) Any user can read documents.
     * @allow (create) User 'testUser' can create a document with creatorId = 'testUser'.
     * @deny (create) User 'testUser' cannot create a document with creatorId = 'otherUser'.
     * @deny (update) User 'otherUser' cannot update a document owned by 'testUser'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Matches the /auditLogs/{logId} path to secure audit logs.
     * @path /auditLogs/{logId}
     * @allow (get) Only admins can read audit logs.
     * @deny (create) No client-side creation allowed.
     */
    match /auditLogs/{logId} {
      allow get: if false; // TODO: Implement admin role check
      allow list: if false; // TODO: Implement admin role check
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
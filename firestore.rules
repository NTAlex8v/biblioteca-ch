/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User profiles are strictly owned by the respective authenticated user.
 * Categories, tags, and documents are publicly readable, but writable only by authenticated users.
 * Administrative roles are managed through a dedicated collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /categories/{categoryId}: Stores category metadata, publicly readable.
 * - /tags/{tagId}: Stores tag metadata, publicly readable.
 * - /documents/{documentId}: Stores document metadata, publicly readable.
 * - /roles_admin/{userId}: Indicates admin role, only accessible by admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Listing the /users collection is denied to prevent information disclosure.
 * - Categories, tags, and documents are publicly readable to facilitate discovery.
 * - Only authenticated users can create, update, or delete categories, tags, and documents.
 * - The 'roles_admin' collection grants administrative privileges.
 *
 * Denormalization for Authorization:
 * - No denormalization required in this version.
 *
 * Structural Segregation:
 * - Administrative roles are segregated into the /roles_admin collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can create their profile if request.auth.uid == userId.
     * @allow (get, update, delete) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can get, update, and delete their profile.
     * @deny (create) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot create a profile for another user.
     * @deny (get, update, delete) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot get, update or delete another user's profile.
     * @deny (list) Listing the /users collection is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to categories.  Allows public read, but only authenticated users can create, update, or delete.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @allow (create) Any authenticated user can create a category.
     * @allow (update) Any authenticated user can update a category.
     * @allow (delete) Any authenticated user can delete a category.
     * @deny Non-authenticated users cannot create, update, or delete.
     * @principle Public read, authenticated write.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to tags.  Allows public read, but only authenticated users can create, update, or delete.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tag data.
     * @allow (create) Any authenticated user can create a tag.
     * @allow (update) Any authenticated user can update a tag.
     * @allow (delete) Any authenticated user can delete a tag.
     * @deny Non-authenticated users cannot create, update, or delete.
     * @principle Public read, authenticated write.
     */
    match /tags/{tagId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to documents.  Allows public read, but only authenticated users can create, update, or delete.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read document data.
     * @allow (create) Any authenticated user can create a document.
     * @allow (update) Any authenticated user can update a document.
     * @allow (delete) Any authenticated user can delete a document.
     * @deny Non-authenticated users cannot create, update, or delete.
     * @principle Public read, authenticated write.
     */
    match /documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to admin roles.  Only allows admins to create, read, update, and delete roles.
     * @path /roles_admin/{userId}
     * @allow (get, list) Any user can list admin role data.
     * @allow (create) Any authenticated user can create an admin role.
     * @allow (update) Any authenticated user can update an admin role.
     * @allow (delete) Any authenticated user can delete an admin role.
     * @deny Non-authenticated users cannot create, update, or delete.
     * @principle Public read, authenticated write.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for some collections with strict ownership and role-based access control for others.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, only accessible to the owning user.
 * - /categories/{categoryId}: Categories, publicly readable but admin-manageable.
 * - /folders/{folderId}: Folders, owned by users and only accessible to them.
 * - /tags/{tagId}: Tags, publicly readable but admin-manageable.
 * - /documents/{documentId}: Documents, owned by users, readable by all, but writable only by the owner.
 * - /auditLogs/{logId}: Audit logs, readable by admins, but not writable.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information leakage.
 * - Documents are publicly readable to promote content discovery, but writes are restricted to the owner.
 * - No data shape validation is performed (prototyping mode).
 *
 * Denormalization for Authorization:
 *  - Documents contain a `createdBy` field to denote the owner, enabling owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource's data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows only authenticated users.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
       return isSignedIn() && (request.auth.token.role == "Admin");
    }

    /**
     * @description Restricts listing of users.
     * @path /users
     * @allow None - Listing users is not permitted.
     * @deny list - Prevents unauthorized listing of user accounts.
     * @principle Prevents information leakage about user accounts.
     */
    match /users {
      allow get: if false;
      allow list: if false;

      /**
       * @description Manages access to individual user profiles.
       * @path /users/{userId}
       * @allow (create) User with matching UID creates their own profile.
       * @allow (get, update, delete) Owner can access and modify their own profile.
       * @deny (create) User attempts to create a profile with a mismatched UID.
       * @deny (get, update, delete) Non-owner attempts to access or modify another user's profile.
       * @principle Enforces user-ownership for profile data.
       */
      match /{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.id == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Manages access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete categories.
     * @deny (create, update, delete) Non-admins cannot modify categories.
     * @principle Role-based access control for category management.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to folders.
     * @path /folders/{folderId}
     * @allow (create) User creates a folder. createdBy == request.auth.uid
     * @allow (get, list, update, delete) Owner can access and modify their own folders.
     * @deny (get, list, update, delete) Non-owner attempts to access or modify another user's folder.
     * @principle Enforces user-ownership for folders.
     */
    match /folders/{folderId} {
      allow get: if isOwner(resource.data.createdBy);
      allow list: if isOwner(resource.data.createdBy);
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages access to tags.
     * @path /tags/{tagId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete tags.
     * @deny (create, update, delete) Non-admins cannot modify tags.
     * @principle Role-based access control for tag management.
     */
    match /tags/{tagId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to documents.
     * @path /documents/{documentId}
     * @allow (get, list) Public read access.
     * @allow (create) User can create a document with themself as the owner.
     * @allow (update, delete) Owner can update or delete their own documents.
     * @deny (update, delete) Non-owner attempts to update or delete another user's document.
     * @principle Owner-only write access for documents.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }
    
    /**
     * @description Manages access to audit logs.
     * @path /auditLogs/{logId}
     * @allow (get, list) Only admins can read audit logs.
     * @deny (create, update, delete) No one can create, update, or delete audit logs through the client.
     * @principle Role-based access control for audit logs.
     */
    match /auditLogs/{logId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user has the 'Admin' role.
     * @return {bool} True if the user is an admin, false otherwise.
     * @example Assuming /users/{uid} document exists with role: "Admin", isAdmin() will return true for that user.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }

    /**
     * @description Checks if the requesting user has the 'Editor' role.
     * @return {bool} True if the user is an editor, false otherwise.
     * @example Assuming /users/{uid} document exists with role: "Editor", isEditor() will return true for that user.
     */
    function isEditor() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Editor";
    }

    /**
     * @description Checks if the requesting user has either the 'Admin' or 'Editor' role.
     * @return {bool} True if the user is either an admin or an editor, false otherwise.
     */
    function isAdminOrEditor() {
      return isAdmin() || isEditor();
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     * @return {bool} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the document.
     * @param {string} userId - The user ID to check against the resource data.
     * @return {bool} True if the user ID matches and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (list) User with 'Admin' role can list all users.
     * @allow (get) Authenticated user can read their own profile (if request.auth.uid == userId) or if they have 'Admin' role.
     * @allow (create, update, delete) Authenticated user can create, update, or delete their own profile (if request.auth.uid == userId) or if they have 'Admin' role.
     * @deny (list) Non-admin users cannot list all users.
     * @deny (get) Unauthenticated users cannot read user profiles. Authenticated users cannot read other user's profiles unless they are an Admin.
     * @deny (create, update, delete) Unauthenticated users cannot modify user profiles. Authenticated users cannot modify other user's profiles unless they are an Admin.
     * @principle Enforces user-ownership and role-based access control.
     */
    match /users/{userId} {
      // Only Admins can list all users
      allow list: if isAdmin();

      // Lectura: dueño del documento o Admin
      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());

      // Crear/editar/eliminar: dueño o Admin
      allow create, update, delete: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }

    /**
     * @description Rules for the /documents/{docId} collection.
     * @path /documents/{docId}
     * @allow (get, list) Any user (authenticated or not) can read documents.
     * @allow (create, update, delete) Only users with 'Admin' or 'Editor' role can create, update, or delete documents.
     * @deny (create, update, delete) Non-admin/editor users cannot modify documents.
     * @principle Grants public read access with restricted write access based on roles.
     */
    match /documents/{docId} {
      // Lectura pública: cualquiera puede listar y leer
      allow get: if true;
      allow list: if true;

      // Escrituras solo Admin/Editor
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Rules for the /categories/{catId} collection.
     * @path /categories/{catId}
     * @allow (get, list) Any user (authenticated or not) can read categories.
     * @allow (create, update, delete) Only users with 'Admin' or 'Editor' role can create, update, or delete categories.
     * @deny (create, update, delete) Non-admin/editor users cannot modify categories.
     * @principle Grants public read access with restricted write access based on roles.
     */
    match /categories/{catId} {
      // Lectura pública: cualquiera puede listar y leer
      allow get: if true;
      allow list: if true;

      // Escrituras restringidas a Admin/Editor
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get, list) Only authenticated users can read tags.
     * @allow (create, update, delete) Only users with 'Admin' or 'Editor' role can create, update, or delete tags.
     * @deny (get, list) Unauthenticated users cannot read tags.
     * @deny (create, update, delete) Non-admin/editor users cannot modify tags.
     * @principle Restricts read access to authenticated users and write access based on roles.
     */
    match /tags/{tagId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update, delete: if isAdminOrEditor();
    }

    /**
     * @description Fallback rule to deny all other requests.
     * @path /{document=**}
     * @deny (read, write) All read and write requests to any other path.
     * @principle Default-deny security posture.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
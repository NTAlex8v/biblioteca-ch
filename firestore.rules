/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. Users have full ownership of their folders and documents.
 * Categories and Tags are globally readable, but only modifiable by admins. Audit logs are generally off-limits, except for user-specific logs.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, with the document ID matching the Firebase Auth UID.
 * - /categories/{categoryId}: Top-level categories, managed by admins.
 * - /folders/{folderId}: Folders created by users to organize documents.
 * - /tags/{tagId}: Tags for cross-classification of documents.
 * - /documents/{documentId}: Document metadata and file URLs.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Categories and Tags are publicly readable.
 * - Ambiguous relationships default to owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is an existing owner, i.e., signed in and owns the document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role.
     * @returns {boolean} True if the user has the Admin role, false otherwise.
     */
    function isAdmin() {
        return request.auth.token.role == 'Admin';
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile with matching ID.
     *   request.auth.uid: 'abc'
     *   resource.data.id: 'abc'
     * @allow (get, list, update, delete) - User 'abc' can read/write their own profile.
     *   request.auth.uid: 'abc'
     *   resource.data.id: 'abc'
     * @deny (create) - User 'abc' cannot create a profile for user 'def'.
     *   request.auth.uid: 'abc'
     *   resource.data.id: 'def'
     * @deny (update, delete) - User 'abc' cannot modify/delete user 'def' profile.
     *   request.auth.uid: 'abc'
     *   resource.data.id: 'def'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages top-level categories, accessible to all for reading, but only modifiable by admins.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @allow (create, update, delete) - Only admins can modify categories.
     *   request.auth.token.role: 'Admin'
     * @deny (create, update, delete) - Non-admins cannot modify categories.
     *   request.auth.token.role: 'User'
     * @principle Allows public read access with admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages user-created folders within categories. Enforces ownership.
     * @path /folders/{folderId}
     * @allow (create) - User 'abc' can create a folder with matching createdBy.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'abc'
     * @allow (get, list, update, delete) - User 'abc' can read/write their own folders.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'abc'
     * @deny (create) - User 'abc' cannot create a folder for user 'def'.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'def'
     * @deny (update, delete) - User 'abc' cannot modify/delete user 'def' folder.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'def'
     * @principle Enforces document ownership for writes.
     */
    match /folders/{folderId} {
      allow get, list: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages tags for cross-classification, accessible to all for reading, but only modifiable by admins.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user can read tags.
     * @allow (create, update, delete) - Only admins can modify tags.
     *   request.auth.token.role: 'Admin'
     * @deny (create, update, delete) - Non-admins cannot modify tags.
     *   request.auth.token.role: 'User'
     * @principle Allows public read access with admin-only writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages documents, enforcing user ownership.
     * @path /documents/{documentId}
     * @allow (create) - User 'abc' can create a document with matching createdBy.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'abc'
     * @allow (get, list, update, delete) - User 'abc' can read/write their own documents.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'abc'
     * @deny (create) - User 'abc' cannot create a document for user 'def'.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'def'
     * @deny (update, delete) - User 'abc' cannot modify/delete user 'def' document.
     *   request.auth.uid: 'abc'
     *   resource.data.createdBy: 'def'
     * @principle Enforces document ownership for writes.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true; // Public list access for rapid iteration.
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

      /**
     * @description Global audit trail. Only Admins can read all logs.
     * @path /auditLogs/{logId}
     * @allow (get, list) - Only admins can read all logs.
     *   request.auth.token.role: 'Admin'
     * @allow (create) - Anyone can create audit logs.
     * @deny (update, delete) - No one can update or delete audit logs.
     * @principle Restricts access to audit logs to admins.
     */
    match /auditLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
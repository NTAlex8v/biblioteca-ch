/**
 * @file Firebase Security Rules for Firestore.
 * @description This ruleset enforces a security model that prioritizes user-owned data and restricts unauthorized access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /categories/{categoryId}: Stores categories for organizing documents. Publicly readable, but write access is not defined.
 * - /tags/{tagId}: Stores tags for cross-classification of documents. Publicly readable, but write access is not defined.
 * - /documents/{documentId}: Stores document metadata and file URLs. Publicly readable, write access is not defined.
 *
 * Key Security Decisions:
 * - User data is strictly owned and controlled by the user.
 * - Listing of user documents is allowed only for the owner.
 * - Public read access is granted to the top-level collections (categories, tags, documents) to enable broader discovery.
 * - Write access is not defined for top-level collections.
 *
 * Denormalization for Authorization:
 *   None implemented currently, but the structure is designed to facilitate denormalization if collaborative features are added later.
 *
 * Structural Segregation:
 *   The database uses structural segregation by storing user profiles in a dedicated /users collection and other entities (categories, tags, documents) at the top level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - User cannot create a profile with a different user ID.
     * @deny (get, list, update, delete) - User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read categories.
     * @deny (create, update, delete) - No one can create, update, or delete categories.
     * @principle Public read, restricted write.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to tags.
     * @path /tags/{tagId}
     * @allow (get, list) - Anyone can read tags.
     * @deny (create, update, delete) - No one can create, update, or delete tags.
     * @principle Public read, restricted write.
     */
    match /tags/{tagId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to documents.
     * @path /documents/{documentId}
     * @allow (get, list) - Anyone can read documents.
     * @deny (create, update, delete) - No one can create, update, or delete documents.
     * @principle Public read, restricted write.
     */
    match /documents/{documentId} {
      allow get, list: if true;
    }
  }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-ownership where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /categories/{categoryId}: Stores categories, managed only by admins.
 * - /folders/{folderId}: Stores user-created folders, accessible to the folder creator.
 * - /tags/{tagId}: Stores tags, publicly readable but writable only by admins.
 * - /documents/{documentId}: Stores document metadata, readable by everyone but writable only by the document creator.
 * - /auditLogs/{logId}: Stores audit logs, readable only by admins.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Categories and Tags are globally readable.
 * - Audit Logs are restricted to admins only.
 * - Documents are readable by all, but writeable only by their creator.
 *
 * Denormalization for Authorization:
 * - Documents require a `createdBy` field that matches the user's UID for write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of a document.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && resource.data.createdBy == ownerId;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the user has the 'Editor' role.
     */
    function isEditor() {
      return isSignedIn() && (request.auth.token.role == 'Editor');
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile.
     * @allow (get) - A user can read their own profile, and admins can read all profiles.
     * @deny (update) - A user cannot update someone else's profile (except admins).
     * @deny (delete) - A user cannot delete someone else's profile (except admins).
     * @principle Enforces user-ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read categories.
     * @deny (create, update, delete) - Only admins can manage categories.
     * @principle Restricts category management to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /folders/{folderId} collection.
     * @path /folders/{folderId}
     * @allow (get, list) - Anyone can read folders.
     * @allow (create) - A user can create their own folders.
     * @allow (update, delete) - Only the folder creator can modify/delete their folders.
     * @principle Enforces user-ownership for folders.
     */
     match /folders/{folderId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
        allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get, list) - Anyone can read tags.
     * @deny (create, update, delete) - Only admins can manage tags.
     * @principle Restricts tag management to admins.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /documents/{documentId} collection.
     * @path /documents/{documentId}
     * @allow (get, list) - Anyone can read documents.
     * @allow (create) - A user can create documents with their UID as the creatorId.
     * @allow (update, delete) - Only the document creator can modify/delete their documents.
     * @principle Enforces user-ownership for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for the /auditLogs/{logId} collection.
     * @path /auditLogs/{logId}
     * @allow (get, list) - Only admins can read audit logs.
     * @deny (create, update, delete) - No one can create, update, or delete audit logs via the client.
     * @principle Restricts audit log access to admins.
     */
    match /auditLogs/{logId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Fallback rule to deny all other requests.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
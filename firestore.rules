rules_version = '2';

service cloud.firestore {
  // === Funciones auxiliares ===
  function isAuthenticated() {
    return request.auth != null;
  }

  function isAdmin() {
    return isAuthenticated() &&
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
  }

  function isEditor() {
    return isAuthenticated() &&
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Editor";
  }

  function isAdminOrEditor() {
    return isAdmin() || isEditor();
  }
  
  function isOwner(docId) {
    return request.auth.uid == get(/databases/$(database)/documents/documents/$(docId)).data.createdBy;
  }
  
  function isOwnerOrAdmin(docId) {
    return isOwner(docId) || isAdmin();
  }

  // === Reglas principales ===
  match /databases/{database}/documents {
    // USERS
    match /users/{userId} {
      // Solo Admin puede listar todos los usuarios
      allow list: if isAdmin();

      // Lectura: dueño o Admin
      allow get: if isAuthenticated() && (request.auth.uid == userId || isAdmin());

      // Escrituras: dueño o Admin
      allow create, update, delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // DOCUMENTS
    match /documents/{docId} {
      allow get, list: if true; // cualquiera puede leer
      allow create: if isAuthenticated(); // cualquiera autenticado puede crear
      allow update, delete: if isOwnerOrAdmin(docId); // solo el dueño o un admin pueden editar/borrar
    }

    // CATEGORIES — lectura pública
    match /categories/{catId} {
      allow get, list: if true; // cualquiera puede leer
      allow create, update, delete: if isAdminOrEditor();
    }

    // TAGS — lectura pública
    match /tags/{tagId} {
      allow get, list: if true; // cualquiera puede leer
      allow create, update, delete: if isAdminOrEditor();
    }

    // Fallback: denegar todo lo demás por defecto
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
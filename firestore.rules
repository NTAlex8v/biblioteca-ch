/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-ownership where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the user themselves.
 * - /categories/{categoryId}: Stores top-level categories; publicly readable, writeable only by admins.
 * - /folders/{folderId}: Stores folders; writeable by the creating user.
 * - /tags/{tagId}: Stores tags; publicly readable and writeable by admins.
 * - /documents/{documentId}: Stores documents; publicly readable, writeable by the creating user.
 * - /auditLogs/{logId}: Stores audit logs; only admins can read all logs.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Categories and Tags are intended to be public and managed by admins.
 * - Documents are publicly readable but only the creating user can modify or delete them.
 * - Audit Logs can only be read by admins.
 *
 * Denormalization for Authorization:
 * - Documents and Folders include a `createdBy` field, which is used for ownership checks. This avoids needing to query a separate collection to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing document.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    /**
     * @description Checks if the current user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

   /**
     * @description Checks if the current user has the 'Editor' role.
     */
    function isEditor() {
      return isSignedIn() && request.auth.token.role == 'Editor';
    }


    match /users/{userId} {
      /**
       * @description Allows users to read and write their own profile data.
       * @path /users/{userId}
       * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
       * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
       * @principle Enforces document ownership for all operations.
       */
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /categories/{categoryId} {
      /**
       * @description Allows anyone to read categories, but only admins can create, update, or delete them.
       * @path /categories/{categoryId}
       * @allow (get, list) if true (public read).
       * @allow (create, update, delete) if the user is an admin.
       * @deny (create, update, delete) if the user is not an admin.
       * @principle Allows public read access with admin-only writes.
       */
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /folders/{folderId} {
      /**
       * @description Allows users to create folders. Only the creating user can update or delete them.
       * @path /folders/{folderId}
       * @allow (get, list) if true (public read).
       * @allow (create) if the user is signed in and the folder's categoryId exists.
       * @allow (update, delete) if the user is the owner of the folder.
       * @deny (create) if the user is not signed in.
       * @deny (update, delete) if the user is not the owner of the folder.
       * @principle Enforces document ownership for updates and deletes.
       */
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.createdBy == request.auth.uid && get(/databases/$(database)/documents/folders/$(folderId)).data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.createdBy == request.auth.uid && get(/databases/$(database)/documents/folders/$(folderId)).data.createdBy == request.auth.uid;
    }

    match /tags/{tagId} {
      /**
       * @description Allows anyone to read tags, but only admins can create, update, or delete them.
       * @path /tags/{tagId}
       * @allow (get, list) if true (public read).
       * @allow (create, update, delete) if the user is an admin.
       * @deny (create, update, delete) if the user is not an admin.
       * @principle Allows public read access with admin-only writes.
       */
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /documents/{documentId} {
      /**
       * @description Allows anyone to read documents, but only the creating user can update or delete them.
       * @path /documents/{documentId}
       * @allow (get, list) if true (public read).
       * @allow (create) if the user is signed in and the document's createdBy field matches the authenticated user's ID and the categoryId exists.
       * @allow (update, delete) if the user is the owner of the document.
       * @deny (create) if the user is not signed in or the createdBy field does not match the authenticated user's ID.
       * @deny (update, delete) if the user is not the owner of the document.
       * @principle Enforces document ownership for updates and deletes.
       */
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.createdBy == request.auth.uid && get(/databases/$(database)/documents/documents/$(documentId)).data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.createdBy == request.auth.uid && get(/databases/$(database)/documents/documents/$(documentId)).data.createdBy == request.auth.uid;
    }

    match /auditLogs/{logId} {
      /**
       * @description Allows only admins to read audit logs. No one can create, update, or delete them via client SDK.
       * @path /auditLogs/{logId}
       * @allow (get, list) if the user is an admin.
       * @deny (create, update, delete) always (not permitted via client SDK).
       * @principle Restricts access to audit logs to admins only.
       */
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
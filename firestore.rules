/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles
 * and public read access with owner-only writes for documents, categories, and tags.
 *
 * @data_structure
 * - `/users/{userId}`: Stores user profile information, accessible only to the owning user.
 * - `/categories/{categoryId}`: Stores category information, publicly readable, but only writable by the owner.
 * - `/tags/{tagId}`: Stores tag information, publicly readable, but only writable by the owner.
 * - `/documents/{documentId}`: Stores document information, publicly readable, but only writable by the owner.
 *
 * @key_security_decisions
 * - Listing of users is disallowed to protect user privacy.
 * - Public read access is granted for categories, tags, and documents to allow open access to library content.
 * - Write access to categories, tags, and documents is restricted to the owner to maintain data integrity.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     *              The document must exist for this function to return true.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && isOwner(ownerId) && resource != null;
    }

    /******************** User Rules ********************/

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (list) Listing users is not allowed.
     * @deny (create) Users cannot create a profile with a different userId.
     * @deny (update, delete) Users cannot modify or delete other user profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Only the user themselves can read their profile
      allow get: if isOwner(userId);
      allow list: if false;

      // Only the user themselves can create their profile, and the userId must match their auth UID
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Only the user themselves can update their profile. Enforce immutability of the id field.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the user themselves can delete their profile
      allow delete: if isExistingOwner(userId);
    }

    /******************** Category Rules ********************/

    /**
     * @description Manages access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @allow (create) Any authenticated user can create a category, and the request must contain an ownerId field.
     * @allow (update, delete) Only the owner of the category can update or delete it.
     * @deny (create) Rejects creation if the category does not contain an ownerId field matching the user's UID.
     * @principle Public read access with owner-only writes.
     */
    match /categories/{categoryId} {
      // Anyone can read categories
      allow get, list: if true;

      // Only the owner can create a category, and the ownerId must match their auth UID
      allow create: if isSignedIn();

      // Only the owner can update or delete a category. The ownerId must match the existing ownerId.
      allow update: if isExistingOwner(resource.data.id);
      allow delete: if isExistingOwner(resource.data.id);
    }

    /******************** Tag Rules ********************/

    /**
     * @description Manages access to tag documents.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @allow (create) Any authenticated user can create a tag, and the request must contain an ownerId field.
     * @allow (update, delete) Only the owner of the tag can update or delete it.
     * @deny (create) Rejects creation if the tag does not contain an ownerId field matching the user's UID.
     * @principle Public read access with owner-only writes.
     */
    match /tags/{tagId} {
      // Anyone can read tags
      allow get, list: if true;

      // Only the owner can create a tag, and the ownerId must match their auth UID
      allow create: if isSignedIn();

      // Only the owner can update or delete a tag. The ownerId must match the existing ownerId.
      allow update: if isExistingOwner(resource.data.id);
      allow delete: if isExistingOwner(resource.data.id);
    }

    /******************** Document Rules ********************/

    /**
     * @description Manages access to document entities.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @allow (create) Any authenticated user can create a document.
     * @allow (update, delete) Only the owner of the document can update or delete it.
     * @principle Public read access with owner-only writes, ownership determined by document.ownerId.
     */
    match /documents/{documentId} {
      // Anyone can read documents
      allow get, list: if true;

      // Only the owner can create a document
      allow create: if isSignedIn();

      // Only the owner can update or delete a document.
      allow update: if isExistingOwner(resource.data.id);
      allow delete: if isExistingOwner(resource.data.id);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user ownership and role-based access control.
 * Users can manage their own data, while admins have broader privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/auditLogs/{logId}: Stores audit logs specific to a user.
 * - /categories/{categoryId}: Stores top-level categories (Admin managed).
 * - /folders/{folderId}: Stores user-created folders.
 * - /tags/{tagId}: Stores tags for documents.
 * - /documents/{documentId}: Stores document metadata.
 * - /auditLogs/{logId}: Stores audit logs for the entire system.
 *
 * Key Security Decisions:
 * - Users can only read their own user documents and audit logs.
 * - Admins can manage categories, tags, and system-wide audit logs.
 * - Folders and documents are accessible to their creators.
 * - Listing of system-wide audit logs is denied to all users due to potential privacy concerns.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by checking the `createdBy` field in documents and folders.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the userId.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role based on custom claims.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the Editor role based on custom claims.
     */
    function isEditor() {
      return isSignedIn() && request.auth.token.role == 'Editor';
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (get) if the user is the owner or an admin.
     * @allow (create) if the user is the owner and the document's ID matches the user ID.
     * @deny (create) if the document's ID does not match the user ID.
     * @allow (update) if the user is the existing owner and the document's ID is not changed.
     * @deny (update) if the user tries to change the document's ID.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId) || isAdmin();

      /**
       * @description Rules for audit logs specific to a user.
       * @path /users/{userId}/auditLogs/{logId}
       * @allow (get) if the user is the owner.
       * @allow (list) if the user is the owner.
       * @allow (create) if the user is the owner.
       * @deny (update) Audit logs should not be updated.
       * @deny (delete) Audit logs should not be deleted by users.
       * @principle Restricts access to audit logs to the owner.
       */
      match /auditLogs/{logId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if false;
      }
    }

    /**
     * @description Rules for categories (Admin-managed).
     * @path /categories/{categoryId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Admin-only write access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for folders (user-created).
     * @path /folders/{folderId}
     * @allow (get, list) Public read access.
     * @allow (create) if the user is signed in and the createdBy field matches the user's ID.
     * @allow (update) if the user is signed in and the createdBy field matches the user's ID.
     * @allow (delete) if the user is signed in and the createdBy field matches the user's ID.
     * @principle Enforces ownership of folders.
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for tags (Admin-managed).
     * @path /tags/{tagId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Admin-only write access for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) Public read access.
     * @allow (create) if the user is signed in and the createdBy field matches the user's ID.
     * @allow (update) if the user is signed in and the createdBy field matches the user's ID.
     * @allow (delete) if the user is signed in and the createdBy field matches the user's ID.
     * @principle Enforces ownership of documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for system-wide audit logs.
     * @path /auditLogs/{logId}
     * @allow (get) if the user is an admin.
     * @deny (list) Deny listing of all audit logs for privacy.
     * @allow (create) if the user is an admin or an editor.
     * @deny (update) Audit logs should not be updated.
     * @deny (delete) Audit logs should not be deleted.
     * @principle Restricts access to audit logs to admins and editors.
     */
    match /auditLogs/{logId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() || isEditor();
      allow update: if false;
      allow delete: if false;
    }
  }
}
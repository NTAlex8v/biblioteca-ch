/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users own their profile data and the folders they create. Admins have broad access to categories and audit logs.
 * Documents and tags are publicly readable, but their creation, modification, and deletion are restricted to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /categories/{categoryId}: Stores top-level categories, managed by Admins.
 * - /folders/{folderId}: Stores folders created by users for organizing documents.
 * - /tags/{tagId}: Stores tags for cross-classification of documents (publicly readable).
 * - /documents/{documentId}: Stores document details (publicly readable).
 * - /auditLogs/{logId}: Stores audit logs of all changes (Admin-only).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Documents and Tags are publicly readable but require authentication to modify.
 *
 * Denormalization for Authorization:
 *  - Documents have a `createdBy` field to track ownership and enforce write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * This function ensures that a document exists before authorizing the write operation.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /**
     * @description Enforces user-ownership for their profile data.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their own.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages top-level categories, accessible only to Admins.
     * @path /categories/{categoryId}
     * @allow (create, get, update, delete) - Only Admins can manage categories.
     * @deny (create, update, delete) - Non-admins cannot manage categories.
     * @deny (list) - Non-admins cannot list categories.
     * @allow (list) - Admins can list categories.
     * @principle Restricts category management to authorized personnel.
     */
    match /categories/{categoryId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores user-created folders, enforcing ownership.
     * @path /folders/{folderId}
     * @allow (create) - A user can create a folder, provided they are authenticated and set the correct `createdBy` field.
     * @allow (get, list, update, delete) - Only the creator can access and modify their folders.
     * @deny (create) - A user cannot create a folder with an incorrect `createdBy` field.
     * @principle Enforces document ownership and ensures data consistency.
     */
    match /folders/{folderId} {
      allow get, list: if isOwner(resource.data.createdBy);
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Stores tags for cross-classification of documents (publicly readable).
     * @path /tags/{tagId}
     * @allow (get, list) - All users can read tags.
     * @allow (create, update, delete) - Only authenticated users can manage tags.
     * @principle Allows public read access while restricting write access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores document details, publicly readable, with owner-only writes.
     * @path /documents/{documentId}
     * @allow (get, list) - All users can read documents.
     * @allow (create) - Only authenticated users can create documents with a matching `createdBy` field.
     * @allow (update, delete) - Only the creator can modify or delete documents.
     * @principle Allows public read access with restricted write access based on ownership.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Stores audit logs, accessible only to Admins.
     * @path /auditLogs/{logId}
     * @allow (get, list) - Only Admins can read audit logs.
     * @allow (create) - Only the application can create audit logs.
     * @deny (update, delete) - Audit logs should not be updated or deleted.
     * @principle Restricts audit log access to authorized personnel.
     */
    match /auditLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
    }
  }
}
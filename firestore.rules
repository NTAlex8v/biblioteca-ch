/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              while allowing public read access to categories, tags, and documents.
 *              Only authenticated users can create, update, or delete documents, categories, or tags.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owner.
 * - /categories/{categoryId}: Stores document categories. Public read access. Owner-only writes.
 * - /tags/{tagId}: Stores document tags. Public read access. Owner-only writes.
 * - /documents/{documentId}: Stores document metadata and file URLs. Public read access. Owner-only writes.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.
 * - Data validation is relaxed to allow for rapid prototyping.
 * - Ownership is enforced using the Firebase Auth UID.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profiles. Only the user can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'user123' can access /users/user123.
     * @allow (create) User 'user123' can create /users/user123.
     * @deny (get, update, delete) User 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to categories.  Only authenticated users can create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @allow (create) Authenticated users can create categories. The 'id' field must match the categoryId.
     * @allow (update, delete) Only the user who created the category can update or delete it.
     * @deny (create) Unauthenticated users cannot create categories.
     * @principle Public read access with owner-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to tags. Only authenticated users can create, update, or delete tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @allow (create) Authenticated users can create tags.
     * @allow (update, delete) Only the user who created the tag can update or delete it.
     * @deny (create) Unauthenticated users cannot create tags.
     * @principle Public read access with owner-only writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to documents.  Only authenticated users can create, update, or delete documents.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @allow (create) Authenticated users can create documents.
     * @allow (update, delete) Only the user who created the document can update or delete it.
     * @deny (create) Unauthenticated users cannot create documents.
     * @principle Public read access with owner-only writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}
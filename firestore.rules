rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile information. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc' and request.resource.data.id == 'abc'.
     * @allow (get,update,delete) - User 'abc' can get, update or delete their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create profile for 'abc' (request.auth.uid != userId).
     * @deny (update,delete) - User 'def' cannot update profile for 'abc' (request.auth.uid != userId).
     * @principle Enforces document ownership for user profiles, ensuring only the owner can manage their data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

       /**
         * @description Controls access to user-specific audit logs. Only the authenticated user can read and write their own logs.
         * @path /users/{userId}/auditLogs/{logId}
         * @allow (create) - User 'abc' can create a log if request.auth.uid == 'abc'.
         * @allow (get,list,update,delete) - User 'abc' can get, list, update or delete their logs if request.auth.uid == 'abc'.
         * @deny (create) - User 'def' cannot create log for 'abc' (request.auth.uid != userId).
         * @deny (get,list,update,delete) - User 'def' cannot get, list, update or delete log for 'abc' (request.auth.uid != userId).
         * @principle Restricts access to a user's own audit log data tree.
         */
      match /auditLogs/{logId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Allows anyone to read Categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user, authenticated or not, can read category data.
     * @deny (create, update, delete) - No one can create, update or delete a category.
     * @principle Open read access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Restricts folder access to the creating user. Only the user who created the folder can read, update, or delete it.
      * @path /folders/{folderId}
      * @allow (create) - User 'abc' can create a folder if request.auth.uid matches the createdBy field.
      * @allow (get, list, update, delete) - User 'abc' can read, list, update, or delete a folder if request.auth.uid matches the createdBy field.
      * @deny (create) - User 'def' cannot create a folder on behalf of 'abc' (createdBy mismatch).
      * @deny (get, list, update, delete) - User 'def' cannot read, list, update, or delete folder created by 'abc'.
      * @principle Enforces creator-only access for folder management.
      */
    match /folders/{folderId} {
      allow get: if resource.data.createdBy == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if request.resource.data.createdBy == request.auth.uid;
      allow update: if resource.data.createdBy == request.auth.uid;
      allow delete: if resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Allows anyone to read Tags.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user, authenticated or not, can read tag data.
     * @deny (create, update, delete) - No one can create, update or delete a tag.
     * @principle Open read access for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Documents, but only the creator can modify.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user, authenticated or not, can read document data.
     * @allow (create) - User can create a document if the createdBy field matches their UID.
     * @allow (update, delete) - Only the document's creator can update or delete it.
     * @deny (create) - A user cannot create a document with a 'createdBy' field that doesn't match their own UID.
     * @deny (update, delete) - A user cannot update or delete a document they don't own.
     * @principle Public read access with owner-only writes, enforced via the 'createdBy' field.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if request.resource.data.createdBy == request.auth.uid;
      allow update: if resource.data.createdBy == request.auth.uid;
      allow delete: if resource.data.createdBy == request.auth.uid;
    }

     /**
      * @description Allows anyone to read AuditLogs, but only authorized services/users can create, update or delete them.
      * @path /auditLogs/{logId}
      * @allow (get, list) - Any user, authenticated or not, can read audit log data.
      * @deny (create, update, delete) - No one can create, update or delete an auditLog.
      * @principle AuditLogs are viewable by everyone, but system-managed.
      */
        match /auditLogs/{logId} {
          allow get, list: if true;
          allow create, update, delete: if false;
        }
  }
}
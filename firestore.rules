/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. It enforces user-ownership for personal data and content organization while allowing public read access to shared resources. Administrative roles are used to manage top-level categories.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /categories/{categoryId}: Top-level categories, managed by admins.
 * - /folders/{folderId}: User-created folders within categories, owned by the creator.
 * - /tags/{tagId}: Global tags for cross-classification, publicly readable.
 * - /documents/{documentId}: Documents with metadata, publicly readable but with owner-only writes.
 * - /auditLogs/{logId}: Stores global audit logs, only accessible by Admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Documents are publicly readable to facilitate content discovery, but writes are restricted to the owner.
 * - Folder creation and management are restricted to the creating user.
 * - Audit logs are secured to admin roles.
 *
 * Denormalization for Authorization:
 * - Documents have a `createdBy` field to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     *              Also verifies that the resource exists to prevent accidental operations on non-existent data.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the Admin role.
     * @returns {boolean} True if the user is an Admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for top-level categories, managed by admins.
     * @path /categories/{categoryId}
     * @allow (create) Admin user can create a category.
     * @allow (get) Any user can read a category.
     * @deny (create) Non-admin user cannot create a category.
     * @principle Restricts category management to admins.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user-created folders within categories.
     * @path /folders/{folderId}
     * @allow (create) User with UID 'user123' can create a folder.
     * @allow (get) Any user can read a folder.
     * @deny (create) User with UID 'user123' cannot create a folder for 'user456'.
     * @principle Enforces user-ownership for folder data.
     */
    match /folders/{folderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Rules for global tags.
     * @path /tags/{tagId}
     * @allow (get) Any user can read a tag.
     * @allow (create) Admin user can create a tag.
     * @deny (create) Non-admin user cannot create a tag.
     * @principle Allows public read access to tags.
     */
    match /tags/{tagId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for documents with metadata.
     * @path /documents/{documentId}
     * @allow (get) Any user can read a document.
     * @allow (create) User with UID 'user123' can create a document with createdBy = 'user123'.
     * @deny (create) User with UID 'user123' cannot create a document with createdBy = 'user456'.
     * @principle Allows public read access but enforces owner-only writes.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Rules for global audit logs, only accessible by Admins.
     * @path /auditLogs/{logId}
     * @allow (get) Admin user can read an audit log.
     * @deny (get) Non-admin user cannot read an audit log.
     * @principle Restricts audit log access to admins.
     */
    match /auditLogs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
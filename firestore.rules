/**
 * @description This ruleset enforces a combination of user-based ownership and public access patterns.
 * Users have full control over their own data trees under /users/{userId}.
 * The /folders collection is publicly readable and writable.
 * Other collections require authentication.
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles.
 * - /categories/{categoryId}: Stores global categories.
 * - /folders/{folderId}: Stores folders, with public read access.
 * - /tags/{tagId}: Stores tags for documents.
 * - /documents/{documentId}: Stores document metadata.
 * @keySecurityDecisions
 * - Users can only manage their own profiles.
 * - Listing of users is disallowed.
 * - Folders are publicly readable and writable.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @principle Enforces user-ownership. Users can only manage their own profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @deny (create) Only authenticated users can create categories.  Additional role-based restriction (Admin) is required
     * @deny (update) No one can update categories.
     * @deny (delete) No one can delete categories.
     * @principle Requires authentication for creation; no updates or deletes allowed.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to folders.
     * @path /folders/{folderId}
     * @allow (get) Any user can read a folder.
     * @allow (list) Any user can list folders.
     * @allow (create) Any user can create folders if authenticated.
     * @allow (update) Any user can update folders if authenticated.
     * @allow (delete) Any user can delete folders if authenticated.
     * @principle Allows public read access and authenticated write access.
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to tags.
     * @path /tags/{tagId}
     * @allow (get) Any user can read a tag.
     * @allow (list) Any user can list tags.
     * @deny (create) No one can create tags.
     * @deny (update) No one can update tags.
     * @deny (delete) No one can delete tags.
     * @principle Public read access with no write access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to documents.
     * @path /documents/{documentId}
     * @allow (get) Any user can read a document.
     * @allow (list) Any user can list documents.
     * @deny (create) Only authenticated users can create documents.
     * @deny (update) No one can update documents.
     * @deny (delete) No one can delete documents.
     * @principle Public read access with authentication required for creation.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
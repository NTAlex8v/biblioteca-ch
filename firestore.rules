/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a role-based access control for administrative tasks and an
 * ownership-based model for user-generated content (documents and folders).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, where {userId} matches the Firebase Auth UID.
 * - /categories/{categoryId}: Stores top-level categories, managed by admins.
 * - /folders/{folderId}: Stores folders created by users to organize documents.
 * - /documents/{documentId}: Stores document metadata, including ownership (createdBy) and category.
 * - /tags/{tagId}: Stores tags for cross-classification of documents.
 * - /auditLogs/{logId}: Stores audit trail of user actions.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Only admins can create and manage categories.
 * - Documents and folders are owned by the user who created them.
 * - Audit logs are write-only by authenticated users.
 *
 * Denormalization for Authorization:
 * - Documents have a `createdBy` field to easily determine ownership.
 * - Folders have a `createdBy` field to easily determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of an existing document.
      * @param {string} userId - The user ID to compare against the authenticated user's UID.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Match for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get) - A user can read their own profile.
     * @allow (update) - A user can update their own profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (list) - User listing is not allowed.
     * @deny (create) - A user cannot create another user profile.
     * @deny (update) - A user cannot update another user profile.
     * @deny (delete) - A user cannot delete another user profile.
     * @principle Enforces user-ownership. Users can only manage their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Match for /categories/{categoryId} documents.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read categories.
     * @deny (create, update, delete) - Only admins can manage categories (TODO: Implement role-based access control).
     * @principle Limits category management to authorized personnel.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement role-based access control
      allow update: if false; // TODO: Implement role-based access control
      allow delete: if false; // TODO: Implement role-based access control
    }

    /**
     * @description Match for /folders/{folderId} documents.
     * @path /folders/{folderId}
     * @allow (get, list) - Anyone can view folder, but creation is managed by the owner
     * @allow (create) - A user can create folders with correct ownership.
     * @allow (update, delete) - Only the folder owner can update/delete it.
     * @deny (create) - Prevents creating folders without proper creatorId link.
     * @deny (update, delete) - Prevents non-owners from modifying folders.
     * @principle Enforces document ownership for folders.
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Match for /tags/{tagId} documents.
     * @path /tags/{tagId}
     * @allow (get, list) - Anyone can read tags.
     * @deny (create, update, delete) - Only admins can manage tags (TODO: Implement role-based access control).
     * @principle Limits tag management to authorized personnel.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement role-based access control
      allow update: if false; // TODO: Implement role-based access control
      allow delete: if false; // TODO: Implement role-based access control
    }

    /**
     * @description Match for /documents/{documentId} documents.
     * @path /documents/{documentId}
     * @allow (get, list) - Anyone can read documents.
     * @allow (create) - A user can create documents with correct ownership.
     * @allow (update, delete) - Only the document owner can update/delete it.
     * @deny (create) - Prevents creating documents without proper creatorId link.
     * @deny (update, delete) - Prevents non-owners from modifying documents.
     * @principle Enforces document ownership for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Match for /auditLogs/{logId} documents.
     * @path /auditLogs/{logId}
     * @deny (get, list, update, delete) - No one can read or modify audit logs.
     * @allow (create) - Any signed-in user can create audit logs.
     * @principle Write-only access for audit logs.
     */
    match /auditLogs/{logId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}
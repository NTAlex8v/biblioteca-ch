/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, while allowing public read access to categories, tags, and documents.
 * Write access to documents is restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /categories/{categoryId}: Stores document categories. Publicly readable, writeable by authenticated users.
 * - /tags/{tagId}: Stores document tags. Publicly readable, writeable by authenticated users.
 * - /documents/{documentId}: Stores document metadata. Publicly readable, writeable by authenticated users,
 *   with a requirement that the authorId field matches the authenticated user's ID.
 *
 * Key Security Decisions:
 * - Users cannot list all user profiles.
 * - Documents are publicly readable to facilitate discovery.
 * - Data shape is not strictly enforced during prototyping to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - The `documents` collection relies on denormalization. Documents MUST contain an `authorId` field to identify the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the authenticated user's UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID of the document owner.
     * @returns {boolean} True if the authenticated user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can create their own profile.
     * @allow (get) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can read their own profile.
     * @allow (update) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can update their own profile.
     * @allow (delete) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can delete their own profile.
     * @deny (create) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot create a profile with a different user ID.
     * @deny (get) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot read another user's profile.
     * @deny (update) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot update another user's profile.
     * @deny (delete) User '2bIAW4LIstaHXKSSRhr2nRpvKr02' cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for document categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read any category.
     * @allow (list) Any user can list categories.
     * @allow (create) Authenticated users can create categories.
     * @allow (update) Authenticated users can update categories.
     * @allow (delete) Authenticated users can delete categories.
     * @deny (create) Unauthenticated users cannot create categories.
     * @deny (update) Unauthenticated users cannot update categories.
     * @deny (delete) Unauthenticated users cannot delete categories.
     * @principle Allows public read access and authenticated write access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Security rules for document tags.
     * @path /tags/{tagId}
     * @allow (get) Any user can read any tag.
     * @allow (list) Any user can list tags.
     * @allow (create) Authenticated users can create tags.
     * @allow (update) Authenticated users can update tags.
     * @allow (delete) Authenticated users can delete tags.
     * @deny (create) Unauthenticated users cannot create tags.
     * @deny (update) Unauthenticated users cannot update tags.
     * @deny (delete) Unauthenticated users cannot delete tags.
     * @principle Allows public read access and authenticated write access for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Security rules for documents.
     * @path /documents/{documentId}
     * @allow (get) Any user can read any document.
     * @allow (list) Any user can list documents.
     * @allow (create) Authenticated users can create documents if they are the author.
     * @allow (update) Authenticated users can update documents if they are the author.
     * @allow (delete) Authenticated users can delete documents if they are the author.
     * @deny (create) Unauthenticated users cannot create documents.
     * @deny (update) Unauthenticated users cannot update documents.
     * @deny (delete) Unauthenticated users cannot delete documents.
     * @principle Allows public read access and owner-only write access for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.author == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.author == request.auth.uid;
    }
  }
}
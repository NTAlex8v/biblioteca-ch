/**
 * @file Firebase Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * and leverages separate collections for roles and public data (categories, tags, documents).
 * Authorization is enforced via the `request.auth` context.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information. Only the authenticated user can access their own profile.
 * - `/categories/{categoryId}`: Categories for organizing documents. Publicly readable.
 * - `/tags/{tagId}`: Tags for cross-classification of documents. Publicly readable.
 * - `/documents/{documentId}`: Details of each document. Publicly readable.
 * - `/roles_admin/{userId}`: Collection to manage admin roles.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of all users is disallowed to protect privacy.
 * - Categories, tags, and documents are publicly readable, but writes are restricted.
 * - Admin privileges are granted by the existence of a document in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 * No denormalization is used in this version.
 *
 * Structural Segregation:
 * Admin roles are managed via a separate `roles_admin` collection, enabling simpler and more performant security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile with matching ID.
     * @allow (get, update, delete) Authenticated user with UID 'user123' accesses their own profile.
     * @deny (get, update, delete) Authenticated user with UID 'user456' tries to access profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing all users
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) Only admins can modify categories.
     * @principle Public read access with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @deny (create, update, delete) Only admins can modify tags.
     * @principle Public read access with restricted writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @deny (create, update, delete) Only admins can modify documents.
     * @principle Public read access with restricted writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can assign admin roles.
     * @allow (get) Only the user or an admin can read the role.
     * @deny (list) Listing of admin roles is not allowed.
     * @principle DBAC: Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
        allow get: if isOwner(userId) || isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}
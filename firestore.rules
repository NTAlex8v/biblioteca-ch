/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, while allowing public read access to categories, tags, and documents.
 * Write access to user profiles is restricted to the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /categories/{categoryId}: Stores category data. Public read, owner-only (Admin role) write.
 * - /tags/{tagId}: Stores tag data. Public read, owner-only (Admin role) write.
 * - /documents/{documentId}: Stores document data. Public read, owner-only (Admin role) write.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed to prevent enumeration attacks.
 * - Categories, tags, and documents are publicly readable but writable only by admins.
 * - Data validation is relaxed to allow for rapid prototyping. Authorization is strictly enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only authenticated users can access the database.
     * @path N/A
     * @allow (read, write) User is signed in.
     * @deny (read, write) User is not signed in.
     * @principle Requires authentication for all access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user ID matches the request's auth UID, false otherwise.
     * @example isOwner('someUserId') -> true if request.auth.uid == 'someUserId'
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user ID matches the request's auth UID, and the resource exists.
     * @example isExistingOwner('someUserId') -> true if request.auth.uid == 'someUserId' and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role.
     * @returns {boolean} True if the user has the Admin role.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Restricts access to user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User is the owner of the profile.
     * @allow (create) User is creating their own profile.
     * @deny (get, update, delete) User is not the owner of the profile.
     * @deny (create) User is not creating their own profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing users to prevent enumeration attacks.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of the id field.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to categories, restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read categories.
     * @allow (create, update, delete) Only admins can create, update, or delete categories.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to tags, restricts write access to admins.
     * @path /tags/{tagId}
     * @allow (get, list) Anyone can read tags.
     * @allow (create, update, delete) Only admins can create, update, or delete tags.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to documents, restricts write access to admins.
     * @path /documents/{documentId}
     * @allow (get, list) Anyone can read documents.
     * @allow (create, update, delete) Only admins can create, update, or delete documents.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
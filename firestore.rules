/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model. Users own their profile data.
 * Admins have read-only access to Categories and AuditLogs. Documents, Folders, and Tags are publicly readable but only authorized users can create, update, or delete them.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where userId matches the Firebase Auth UID.
 * - /categories/{categoryId}: Top-level categories, managed by Admins.
 * - /folders/{folderId}: User-created folders within categories.
 * - /tags/{tagId}: Tags for cross-classification of documents.
 * - /documents/{documentId}: Document details, including metadata and file URL.
 * - /auditLogs/{logId}: Global audit trail.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Categories are publicly readable, but only admins can modify them.
 * - Documents are publicly readable, but writes are restricted to authorized users (currently no ownership check).
 * - Folders are publicly readable, but writes are restricted to authorized users (currently no ownership check).
 * - Tags are publicly readable, but writes are restricted to authorized users (currently no ownership check).
 * - Audit Logs are readable only by Admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role.
     * @returns {boolean} True if the user has the Admin role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) User with UID 'user123' can get, update, and delete their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID.
     * @deny (get, update, delete) User with UID 'user123' cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read categories.
     * @allow (create, update, delete) Only admins can create, update, and delete categories.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete categories.
     * @principle Public read, admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for folders.
     * @path /folders/{folderId}
     * @allow (get, list) Anyone can read folders.
     * @deny (create, update, delete) No write rules defined yet.
     * @principle Public read, owner-only writes (NOT IMPLEMENTED - MISSING OWNER FIELD).
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) Anyone can read tags.
     * @deny (create, update, delete) No write rules defined yet.
     * @principle Public read, owner-only writes (NOT IMPLEMENTED - MISSING OWNER FIELD).
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) Anyone can read documents.
     * @deny (create, update, delete) No write rules defined yet.
     * @principle Public read, owner-only writes (NOT IMPLEMENTED - MISSING OWNER FIELD).
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Rules for audit logs.
     * @path /auditLogs/{logId}
     * @allow (get, list) Only admins can read audit logs.
     * @deny (create, update, delete) No one can modify audit logs directly. They are only created by backend services.
     * @principle Admin-only read access.
     */
    match /auditLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
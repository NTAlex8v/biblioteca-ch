/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system with an "Admin", and "Editor" and "User" role.
 * Users can only read and write their own profile data. Listing the /users collection is restricted to "Admin" users.
 * The documents, categories, and tags collections are publicly readable but only modifiable by "Admin" and "Editor" users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, including role. The userId must match the authenticated user's UID.
 * - /documents/{documentId}: Stores document metadata.
 * - /categories/{categoryId}: Stores document categories.
 * - /tags/{tagId}: Stores tags for cross-classification of documents.
 *
 * Key Security Decisions:
 * - Listing the /users collection is restricted to "Admin" to prevent enumeration of users.
 * - "Admin" and "Editor" roles are granted broad access to modify documents, categories, and tags. This will require secure role assignment via the Admin SDK.
 *
 * Denormalization for Authorization:
 * - The `role` field is stored directly within the `/users/{userId}` document to enable role-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is signed in and their ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is signed in and the requested document exists
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is signed in, their ID matches the provided userId and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Checks if the user has the "Admin" role.
     * @return {boolean} True if the user is signed in and has the "Admin" role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }

    /**
     * @description Checks if the user has the "Editor" role.
     * @return {boolean} True if the user is signed in and has the "Editor" role, false otherwise.
     */
    function isEditor() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Editor";
    }

    /**
     * @description Checks if the user has either the "Admin" or "Editor" role.
     * @return {boolean} True if the user is signed in and has either the "Admin" or "Editor" role, false otherwise.
     */
    function isAdminOrEditor() {
      return isAdmin() || isEditor();
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (list) If the request is made by an Admin user.
     * @allow (get) If the request is made by the owner of the user document or an Admin.
     * @allow (create, update, delete) If the request is made by the owner of the user document or an Admin.
     * @deny (list) If the request is not made by an Admin user.
     * @deny (get) If the request is not made by the owner of the user document or an Admin.
     * @deny (create, update, delete) If the request is not made by the owner of the user document or an Admin.
     * @principle Enforces user ownership and admin override for user profile data.
     */
    match /users/{userId} {
      allow list: if isAdmin();
      allow get: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Security rules for the /documents/{documentId} collection.
     * @path /documents/{documentId}
     * @allow (get, list) If the user is authenticated.
     * @allow (create, update, delete) If the user is an Admin or Editor.
     * @deny (get, list) If the user is not authenticated.
     * @deny (create, update, delete) If the user is not an Admin or Editor.
     * @principle Allows public read access but restricts modification to admins and editors.
     */
    match /documents/{documentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor() && resource != null;
      allow delete: if isAdminOrEditor() && resource != null;
    }

    /**
     * @description Security rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list) If the user is authenticated.
     * @allow (create, update, delete) If the user is an Admin or Editor.
     * @deny (get, list) If the user is not authenticated.
     * @deny (create, update, delete) If the user is not an Admin or Editor.
     * @principle Allows public read access but restricts modification to admins and editors.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor() && resource != null;
      allow delete: if isAdminOrEditor() && resource != null;
    }

    /**
     * @description Security rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get, list) If the user is authenticated.
     * @allow (create, update, delete) If the user is an Admin or Editor.
     * @deny (get, list) If the user is not authenticated.
     * @deny (create, update, delete) If the user is not an Admin or Editor.
     * @principle Allows public read access but restricts modification to admins and editors.
     */
    match /tags/{tagId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor() && resource != null;
      allow delete: if isAdminOrEditor() && resource != null;
    }

    /**
     * @description Fallback rule to deny all other requests.
     * @path /{document=**}
     * @allow read, write: if false;
     * @principle Denies all access to paths not explicitly defined.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
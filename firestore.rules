/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to categories, tags, and documents while restricting
 * write access to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owner.
 * - /categories/{categoryId}: Stores category data, publicly readable.
 * - /tags/{tagId}: Stores tag data, publicly readable.
 * - /documents/{documentId}: Stores document data, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing of users is disallowed.
 * - Categories, tags, and documents are publicly readable, but write access requires authentication.
 *
 * Denormalization for Authorization: N/A in the current data model
 * Structural Segregation: Public and private data are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles. Only the user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (read, update, delete) User with UID 'user123' can read their own profile at /users/user123.
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123.
     * @deny (read, update, delete) User with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
        function isSignedIn() {
            return request.auth != null;
        }

      // Function to check if the requested user id matches the authenticated user id.
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

      // Function to check if the user is signed in and is the document owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId; // User can create their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Only the owner can update, and the user ID cannot be changed.
      allow delete: if isExistingOwner(userId); // Only the owner can delete.
    }

    /**
     * @description Allows public read access to categories. Write access is restricted to authenticated users.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @allow (create, update, delete) Authenticated user can perform write operations.
     * @deny (create, update, delete) Unauthenticated user cannot perform write operations.
     * @principle Allows public reads and authenticated writes for categories.
     */
    match /categories/{categoryId} {
        function isSignedIn() {
            return request.auth != null;
        }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to tags. Write access is restricted to authenticated users.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @allow (create, update, delete) Authenticated user can perform write operations.
     * @deny (create, update, delete) Unauthenticated user cannot perform write operations.
     * @principle Allows public reads and authenticated writes for tags.
     */
    match /tags/{tagId} {
        function isSignedIn() {
            return request.auth != null;
        }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to documents. Write access is restricted to authenticated users.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @allow (create, update, delete) Authenticated user can perform write operations.
     * @deny (create, update, delete) Unauthenticated user cannot perform write operations.
     * @principle Allows public reads and authenticated writes for documents.
     */
    match /documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }
}
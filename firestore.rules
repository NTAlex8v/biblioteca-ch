/**
 * @file Firebase Security Rules for Firestore.
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to categories, tags, and documents, with owner-only write access enforced through the document's data.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile information. Only the user with the matching UID can read or write their profile.
 * - `/categories/{categoryId}`: Stores category information. Publicly readable, but writes are restricted.
 * - `/tags/{tagId}`: Stores tag information. Publicly readable, but writes are restricted.
 * - `/documents/{documentId}`: Stores document metadata. Publicly readable, but writes are restricted to the document's author.
 *
 * @keySecurityDecisions
 * - Users can only list their own documents.
 * - Categories, Tags, and Documents are publicly readable to allow for open discovery.
 * - User listing is disallowed.
 * - The absence of an `ownerId` field on the `/documents/{documentId}` path requires a TODO to be added to the rules. This should be addressed as soon as possible by adding the appropriate field to the schema.
 *
 * @denormalizationForAuthorization
 * The `Document` entity should contain an `authorId` field that matches the UID of the user who created the document. This allows for efficient owner-only write rules without additional reads.
 *
 * @structuralSegregation
 * User profiles are stored in a separate `/users/{userId}` collection, ensuring private user data is not mixed with public content.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in and the UID matches, false otherwise.
     * @example
     * isOwner('someUserId') // Returns true if request.auth.uid == 'someUserId'
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in, the UID matches, and the document exists.
     * @example
     * isExistingOwner('someUserId') // Returns true if request.auth.uid == 'someUserId' and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get,update,delete) - User 'user123' can read, update, or delete their profile if authenticated as 'user123'.
     * @deny (create) - User 'user456' cannot create a profile for 'user123'.
     * @deny (get,update,delete) - User 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @deny (create, update, delete) - Only admins can create, update, or delete categories (currently disabled).
     * @principle Public read access with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user can read tags.
     * @deny (create, update, delete) - Only admins can create, update, or delete tags (currently disabled).
     * @principle Public read access with restricted writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user can read documents.
     * @deny (create, update, delete) - Only the author can create, update, or delete documents.
     * @principle Public read access with owner-only writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;

      // CRITICAL: Cannot implement owner-only writes. The 'Document' entity is missing an 'authorId' or 'ownerId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}
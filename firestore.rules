/**
 * @fileOverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User-specific data is protected by ownership checks, while administrative functions
 * are secured using a dedicated "roles_admin" collection. Data validation is relaxed
 * to facilitate rapid prototyping, focusing primarily on authorization and relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the owner.
 * - /categories/{categoryId}: Public collection for document categories.
 * - /tags/{tagId}: Public collection for document tags.
 * - /documents/{documentId}: Public collection for documents with owner-only writes.
 * - /roles_admin/{userId}: Collection to grant admin privileges based on the presence of a document with the user's ID.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data.
 * - The "documents" collection allows public read access but restricts writes to the document owner.
 * - The "roles_admin" collection provides a simple and secure mechanism for granting administrative privileges without complex role hierarchies.
 *
 * Denormalization for Authorization:
 * - The `documents` collection requires an `ownerId` or `authorId` field (not currently present) to implement owner-only writes.
 *   If implemented, this field must be validated during `create` operations to match the authenticated user's UID.
 *
 * Structural Segregation:
 * - Administrative roles are stored in a separate `/roles_admin` collection, allowing secure filtering based on role membership without exposing sensitive data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} - True if the UIDs match, false otherwise.
     * @example
     *   // Allow read if the user is the owner:
     *   allow read: if isOwner(resource.data.userId);
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of a document.
     * Used for update and delete operations to ensure the document exists and the user is the owner.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} - True if the UIDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the /roles_admin/{userId} collection.
     * @returns {boolean} - True if the user has admin privileges, false otherwise.
     * @example
     *   // Allow write if the user is an admin:
     *   allow write: if isAdmin();
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with a matching userId can create their own document.
     * @allow (get, list, update, delete) - Authenticated user with a matching userId can read, update, or delete their own document.
     * @deny (create) - Authenticated user cannot create a document for another user.
     * @deny (get, list, update, delete) - Authenticated user cannot read, update, or delete another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly disallowing listing for enhanced privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @allow (create, update, delete) - Only admins can create, update, or delete categories.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user can read tags.
     * @allow (create, update, delete) - Only admins can create, update, or delete tags.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /documents/{documentId} collection.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user can read documents.
     * @allow (create, update, delete) - Only the owner can create, update, or delete documents.
     * @deny (create, update, delete) - Non-owner users cannot create, update, or delete documents.
     * @principle Allows public read access but restricts writes to the document owner.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Document' entity is missing an 'ownerId' or 'authorId' field.
    }

     /**
      * @description Rules for the /roles_admin/{userId} collection.
      * @path /roles_admin/{userId}
      * @allow (get, create, update, delete) - Only admins can manage admin roles.
      * @allow (list) - Listing is disabled for security.
      * @deny (get, create, update, delete) - Non-admin users cannot manage admin roles.
      * @principle Restricts access to admin role management to existing admins.
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource (and that the resource exists).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(resource.path);
    }

    /**
     * @description Checks if the user has admin privileges by verifying that a document exists for the user in the /roles_admin collection.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @deny (create) Only admins can create categories.
     * @deny (update) Only admins can update categories.
     * @deny (delete) Only admins can delete categories.
     * @principle Allows public read access to categories, restricts writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get) Any user can read a tag.
     * @allow (list) Any user can list tags.
     * @deny (create) Only admins can create tags.
     * @deny (update) Only admins can update tags.
     * @deny (delete) Only admins can delete tags.
     * @principle Allows public read access to tags, restricts writes to admins.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /documents/{documentId} collection.
     * @path /documents/{documentId}
     * @allow (get) Any user can read a document.
     * @allow (list) Any user can list documents.
     * @deny (create) Only admins can create documents.
     * @deny (update) Only admins can update documents.
     * @deny (delete) Only admins can delete documents.
     * @principle Allows public read access to documents, restricts writes to admins.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get) Only the user can read their admin role.
     * @deny (list) No listing of admin roles is allowed.
     * @allow (create) A user can create their admin role document if they are an admin.
     * @allow (update) A user can update their admin role document if they are an admin.
     * @allow (delete) A user can delete their admin role document if they are an admin.
     * @principle Restricts access to admin role documents to the admin user.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isAdmin();
      allow update: if isExistingOwner(userId) && isAdmin();
      allow delete: if isExistingOwner(userId) && isAdmin();
    }
  }
}
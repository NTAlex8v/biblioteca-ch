/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user themselves.
 * - /categories/{categoryId}: Stores document categories. Publicly readable.
 * - /tags/{tagId}: Stores document tags. Publicly readable.
 * - /documents/{documentId}: Stores document metadata. Publicly readable, but write access is restricted.
 * - /roles_admin/{userId}: The presence of a document with a user's ID grants them admin privileges.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listing the /users collection is denied to prevent information disclosure.
 * - Categories, tags, and documents are publicly readable to facilitate browsing.
 * - Only admins can create, update, or delete user documents in /users.
 * - The existence of a document in /roles_admin/{userId} confers admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by checking for a document in the /roles_admin/{userId} collection.
     * @return {bool} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces that the requesting user is an existing owner of a document.  Combines the ownership check with an existence check to prevent operations on non-existent documents.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is signed in, the UID matches, and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a document at /users/user123.
     * @deny (create) User with UID 'user123' creates a document at /users/user456.
     * @deny (list) Any user attempts to list the /users collection.
     * @principle Enforces user-ownership for data privacy and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Prevent listing of all user documents

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isAdmin();
    }

    /**
     * @description Categories are publicly readable and writable by admins only.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category information.
     * @allow (create) Admin creates a new category.
     * @deny (create) Non-admin attempts to create a category.
     * @principle Public read access with admin-controlled writes for category management.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Tags are publicly readable and writable by admins only.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tag information.
     * @allow (create) Admin creates a new tag.
     * @deny (create) Non-admin attempts to create a tag.
     * @principle Public read access with admin-controlled writes for tag management.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Documents are publicly readable, but write access is restricted to admins.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read document information.
     * @allow (create) Admin creates a new document.
     * @deny (create) Non-admin attempts to create a document.
     * @principle Public read access with admin-controlled writes for document management.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Admin role management. The presence of a document with a user's ID grants them admin privileges.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // No listing

      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}
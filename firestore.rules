/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data and allows public read access to shared collections.
 * Write access is strictly controlled to prevent unauthorized data modification.
 *
 * Data Structure:
 * - Users: /users/{userId} - Stores user profile data.
 *   - Audit Logs: /users/{userId}/auditLogs/{logId} - Stores audit logs specific to each user.
 * - Categories: /categories/{categoryId} - Stores top-level categories (Admin-managed).
 * - Folders: /folders/{folderId} - Stores user-created folders.
 * - Tags: /tags/{tagId} - Stores tags for cross-classification.
 * - Documents: /documents/{documentId} - Stores document metadata.
 * - AuditLogs: /auditLogs/{logId} - Stores system-wide audit logs.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document and audit logs.
 * - Categories and Tags are publicly readable. Writes are not secured in this prototyping phase.
 * - Documents are publicly readable, but only the owner can modify or delete them.
 *
 * Denormalization for Authorization:
 * - Documents have a `createdBy` field to indicate ownership, enabling secure write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level check to ensure all requests are authenticated.
     * @path /
     * @allow (read) if true
     * @deny (write) if false
     * @principle Requires all requests to be authenticated.
     */
    match /{document=**} {
        allow read: if true;
        allow write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, list) User can read their own profile.
     * @allow (update, delete) User can update/delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (get, list, update, delete) User cannot access other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for managing audit logs for individual users.
     * @path /users/{userId}/auditLogs/{logId}
     * @allow (create) User can create audit logs under their profile.
     * @allow (get, list) User can read their own audit logs.
     * @allow (update, delete) User cannot update or delete audit logs.
     * @deny (create) User cannot create audit logs with mismatched user ID.
     * @deny (get, list) User cannot access other user's audit logs.
     * @principle Restricts access to a user's own audit logs.
     */
    match /users/{userId}/auditLogs/{logId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for managing top-level categories. (Publicly readable, writes are open in this prototype)
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @allow (create, update, delete) No security implemented in this prototype.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only validation
    }

     /**
      * @description Rules for managing folders. User must be the owner.
      * @path /folders/{folderId}
      * @allow (get, list) Any user can read folders.
      * @allow (create, update, delete) No security implemented in this prototype.
      */
     match /folders/{folderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner-only validation
     }

    /**
     * @description Rules for managing tags. (Publicly readable, writes are open in this prototype)
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @allow (create, update, delete) No security implemented in this prototype.
     * @principle Allows public read access to tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only validation
    }

    /**
     * @description Rules for managing documents. (Publicly readable, owner-only writes)
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @allow (create) Only the document creator can create a document, and they must set the `createdBy` field to their UID.
     * @allow (update, delete) Only the document creator can update or delete the document.
     * @deny (create) If the `createdBy` field doesn't match the user's UID.
     * @principle Enforces owner-only writes for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for managing system-wide audit logs.
     * @path /auditLogs/{logId}
     * @allow (get, list) Any user can read audit logs.
     * @allow (create, update, delete) No security implemented in this prototype.
     */
    match /auditLogs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add stronger validation.
    }
  }
}
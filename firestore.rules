/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for folders and documents,
 *              admin-only management of categories and tags, and restricts user profile
 *              access to the owning user. Audit logs are globally readable by admins,
 *              and user-specific logs are readable by the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the owning user.
 * - /categories/{categoryId}: Stores global categories, managed only by admins.
 * - /folders/{folderId}: Stores folders created by users, accessible only by the owning user.
 * - /tags/{tagId}: Stores global tags, managed only by admins.
 * - /documents/{documentId}: Stores documents created by users, accessible only by the owning user.
 * - /auditLogs/{logId}: Stores audit logs, globally readable by admins.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - Documents, folders, and user profiles are strictly owned and controlled by the creating user.
 * - Categories and tags are globally managed by admins only.
 * - Audit logs can only be created by trusted server code and are secured accordingly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is an Admin.
      * @returns {boolean} True if the user has the 'Admin' role, false otherwise.
      */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

     /**
      * @description Checks if the authenticated user is an Editor.
      * @returns {boolean} True if the user has the 'Editor' role, false otherwise.
      */
     function isEditor() {
          return isSignedIn() && request.auth.token.role == 'Editor';
     }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for categories.
     * @path /categories/{categoryId}
     * @allow (create) Admin can create a category.
     * @allow (get) Anyone can read a category.
     * @deny (create) User cannot create a category.
     * @deny (update) User cannot update a category.
     * @principle Restricts category management to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for folders.
     * @path /folders/{folderId}
     * @allow (create) User with UID 'user123' can create a folder.
     * @allow (get) User with UID 'user123' can read a folder they created.
     * @deny (create) User with UID 'user456' cannot create a folder for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the folder of user 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /folders/{folderId} {
      allow get: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow list: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (create) Admin can create a tag.
     * @allow (get) Anyone can read a tag.
     * @deny (create) User cannot create a tag.
     * @deny (update) User cannot update a tag.
     * @principle Restricts tag management to admins.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (create) User with UID 'user123' can create a document.
     * @allow (get) User with UID 'user123' can read a document they created.
     * @deny (create) User with UID 'user456' cannot create a document for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the document of user 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.createdBy == resource.data.createdBy && resource != null;
      allow delete: if isSignedIn() && request.resource.data.createdBy == resource.data.createdBy && resource != null;
    }
     /**
      * @description Rules for global audit logs.
      * @path /auditLogs/{logId}
      * @allow (get) Admin can read all audit logs.
      * @deny (get) User cannot read global audit logs.
      * @principle Restricts global audit log access to admins.
      */
     match /auditLogs/{logId} {
          allow get, list: if isAdmin();
          allow create, update, delete: if false; // Only server code can write audit logs
     }
  }
}
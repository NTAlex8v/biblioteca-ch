/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and provides public read access to categories, tags, and documents while restricting writes to authorized users.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /categories/{categoryId}: Stores category metadata, publicly readable, writes are restricted.
 * - /tags/{tagId}: Stores tag metadata, publicly readable, writes are restricted.
 * - /documents/{documentId}: Stores document metadata, publicly readable, writes are restricted.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed to prevent enumeration attacks.
 * - Categories, tags, and documents are publicly readable, but write access is restricted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in, the UID matches, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * Defines security rules for user profile documents.
     *
     * @path /users/{userId}
     *
     * @allow (create) User with UID 'user123' creates their own profile document at /users/user123.
     * @allow (get) User with UID 'user123' reads their profile document at /users/user123.
     * @allow (update) User with UID 'user123' updates their profile document at /users/user123.
     * @allow (delete) User with UID 'user123' deletes their profile document at /users/user123.
     *
     * @deny (create) User with UID 'user123' attempts to create a profile for user 'user456' at /users/user456.
     * @deny (get) User with UID 'user123' attempts to read the profile of user 'user456' at /users/user456.
     * @deny (update) User with UID 'user123' attempts to update the profile of user 'user456' at /users/user456.
     * @deny (delete) User with UID 'user123' attempts to delete the profile of user 'user456' at /users/user456.
     * @deny (list) Any user attempts to list all users.
     *
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Read permissions: Only the owner can get their own profile.
      allow get: if isOwner(userId);
      // List is denied to prevent user enumeration
      allow list: if false;

      // Write permissions: Only the owner can create, update, or delete their own profile.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Defines security rules for category documents.  Categories are publicly readable, but writes are restricted.
     *
     * @path /categories/{categoryId}
     *
     * @allow (get, list) Any user can read category documents.
     *
     * @deny (create) Any user attempts to create a category.
     * @deny (update) Any user attempts to update a category.
     * @deny (delete) Any user attempts to delete a category.
     *
     * @principle Allows public reads, restricts writes.
     */
    match /categories/{categoryId} {
      // Read permissions:  Anyone can read categories.
      allow get, list: if true;

      // Write permissions: Only authorized users can create, update, or delete categories (add role based access if needed).
      allow create: if false; // TODO: Implement role-based access.
      allow update: if false; // TODO: Implement role-based access.
      allow delete: if false; // TODO: Implement role-based access.
    }

    /**
     * @description
     * Defines security rules for tag documents. Tags are publicly readable, but writes are restricted.
     *
     * @path /tags/{tagId}
     *
     * @allow (get, list) Any user can read tag documents.
     *
     * @deny (create) Any user attempts to create a tag.
     * @deny (update) Any user attempts to update a tag.
     * @deny (delete) Any user attempts to delete a tag.
     *
     * @principle Allows public reads, restricts writes.
     */
    match /tags/{tagId} {
      // Read permissions: Anyone can read tags.
      allow get, list: if true;

      // Write permissions: Only authorized users can create, update, or delete tags (add role based access if needed).
      allow create: if false; // TODO: Implement role-based access.
      allow update: if false; // TODO: Implement role-based access.
      allow delete: if false; // TODO: Implement role-based access.
    }

    /**
     * @description
     * Defines security rules for document documents. Documents are publicly readable, but writes are restricted.
     *
     * @path /documents/{documentId}
     *
     * @allow (get, list) Any user can read document documents.
     *
     * @deny (create) Any user attempts to create a document.
     * @deny (update) Any user attempts to update a document.
     * @deny (delete) Any user attempts to delete a document.
     *
     * @principle Allows public reads, restricts writes.
     */
    match /documents/{documentId} {
      // Read permissions: Anyone can read documents.
      allow get, list: if true;

      // Write permissions: Only authorized users can create, update, or delete documents (add role based access if needed).
      allow create: if false; // TODO: Implement role-based access.
      allow update: if false; // TODO: Implement role-based access.
      allow delete: if false; // TODO: Implement role-based access.
    }
  }
}
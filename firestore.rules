/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-based ownership and role-based access control for a virtual library application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /categories/{categoryId}: Stores top-level categories, publicly readable.
 * - /folders/{folderId}: Stores folders for organizing documents, created and managed by users.
 * - /tags/{tagId}: Stores tags for cross-classification of documents, publicly readable.
 * - /documents/{documentId}: Stores document details, created and managed by users.
 * - /auditLogs/{logId}: Stores audit logs of application actions. Only admins can access all logs.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Listing of user documents is restricted to admins.
 * - Categories and Tags are publicly readable.
 * - Documents and Folders are owner-write, public-read. Documents enforce `createdBy` field is immutable
 * - Audit Logs are only accessible to admins.
 *
 * Denormalization for Authorization:
 * - Documents have a `createdBy` field to enable owner-based access control.
 * - Folders have a `createdBy` field to enable owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the document.
     */
    function isExistingOwner() {
      return request.auth.uid == resource.data.createdBy;
    }

    /**
     * @description Checks if the user has the Admin role.
     */
    function isAdmin() {
       return request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the Editor role.
     */
    function isEditor() {
       return request.auth.token.role == 'Editor';
    }


    /**
     * @description Grants access to user documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own user document at /users/user_abc.
     * @allow (update) - Admin can update any user document. User with UID 'user_abc' can update their own user document at /users/user_abc.
     * @allow (get) - Admin can get any user document. User with UID 'user_abc' can get their own user document at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a document at /users/user_xyz.
     * @deny (update) - User with UID 'user_abc' cannot update the user document at /users/user_xyz.
     * @deny (delete) - User with UID 'user_abc' cannot delete the user document at /users/user_abc. Only Admins can.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isAdmin() || (isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid);
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to categories, but restricts writes.
     * @path /categories/{categoryId}
     * @allow (get) - Any user can read a category.
     * @allow (list) - Any user can list categories.
     * @deny (create) - Only admins can create categories.
     * @deny (update) - Only admins can update categories.
     * @deny (delete) - Only admins can delete categories.
     * @principle Public read, admin-only write.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants owner-based access to folders.
     * @path /folders/{folderId}
     * @allow (get) - Any user can read a folder.
     * @allow (list) - Any user can list folders.
     * @allow (create) - User with UID 'user_abc' can create a folder. creatorId must equal user_abc.
     * @allow (update) - User with UID 'user_abc' can update a folder they created.
     * @allow (delete) - User with UID 'user_abc' can delete a folder they created.
     * @deny (create) - User with UID 'user_abc' cannot create a folder with creatorId = user_xyz.
     * @deny (update) - User with UID 'user_abc' cannot update a folder created by user_xyz.
     * @deny (delete) - User with UID 'user_abc' cannot delete a folder created by user_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Grants public read access to tags, but restricts writes.
     * @path /tags/{tagId}
     * @allow (get) - Any user can read a tag.
     * @allow (list) - Any user can list tags.
     * @deny (create) - Only admins can create tags.
     * @deny (update) - Only admins can update tags.
     * @deny (delete) - Only admins can delete tags.
     * @principle Public read, admin-only write.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants owner-based write access to documents with public read access.
     * @path /documents/{documentId}
     * @allow (get) - Any user can read a document.
     * @allow (list) - Any user can list documents.
     * @allow (create) - User with UID 'user_abc' can create a document, but must set createdBy = user_abc.
     * @allow (update) - User with UID 'user_abc' can update a document they created, and createdBy cannot be changed.
     * @allow (delete) - User with UID 'user_abc' can delete a document they created.
     * @deny (create) - User with UID 'user_abc' cannot create a document with createdBy = user_xyz.
     * @deny (update) - User with UID 'user_abc' cannot update a document created by user_xyz.
     * @deny (delete) - User with UID 'user_abc' cannot delete a document created by user_xyz.
     * @principle Public read, owner-only write. Enforces immutable creatorId on update.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

     /**
      * @description Grants access to audit logs.
      * @path /auditLogs/{logId}
      * @allow (get) - Admins can get any audit log.
      * @allow (list) - Admins can list audit logs.
      * @deny (create) - No one can create audit logs through the client.
      * @deny (update) - No one can update audit logs.
      * @deny (delete) - No one can delete audit logs.
      * @principle Admin-only access.
      */
    match /auditLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
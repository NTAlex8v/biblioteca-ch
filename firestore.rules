/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to categories, tags, and documents while restricting write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /categories/{categoryId}: Stores document categories, publicly readable, write-protected.
 * - /tags/{tagId}: Stores document tags, publicly readable, write-protected.
 * - /documents/{documentId}: Stores document metadata, publicly readable, write-protected.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents. Listing the /users collection is denied.
 * - Categories, tags, and documents are publicly readable but only writable by authorized roles (to be implemented).
 * - Data validation is minimized for rapid prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * -  N/A - currently no denormalization is required for authorization.
 *
 * Structural Segregation:
 * - Publicly readable data (categories, tags, documents) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) User with UID 'user123' can read and write their own profile.
     * @deny (read, write) User with UID 'user456' cannot read or write 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false; // Listing users is not permitted.
    }

    /**
     * @description Controls access to document categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) No user can create, update, or delete categories without specific authorization.
     * @principle Public read, restricted write access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to document tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @deny (create, update, delete) No user can create, update, or delete tags without specific authorization.
     * @principle Public read, restricted write access for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to documents.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @deny (create, update, delete) No user can create, update, or delete documents without specific authorization.
     * @principle Public read, restricted write access for documents.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}
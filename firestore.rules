/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles
 * and a public-read, owner-write model for documents, categories, and tags. Administrative
 * privileges are granted based on the existence of a document in the /roles_admin/{userId} collection.
 *
 * @Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /categories/{categoryId}: Stores categories, publicly readable, but only writable by admins.
 * - /tags/{tagId}: Stores tags, publicly readable, but only writable by admins.
 * - /documents/{documentId}: Stores documents, publicly readable, but only writable by admins.
 * - /roles_admin/{userId}: Collection to store admin roles based on user ID.
 *
 * @Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations are strictly controlled to prevent unauthorized data modification.
 * - Data validation is limited to essential checks for authorization and relational integrity.
 * - The rules rely on denormalization to avoid costly `get()` calls and maintain performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a document at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the document at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the document at /users/user123.
     * @deny (list) - All users are denied the ability to list documents in the /users collection.
     * @principle Enforces document ownership for reads and writes, restricts listing for privacy.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to all for categories, but restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user, authenticated or not, can read category data.
     * @allow (create) - Only an admin user can create new categories.
     * @allow (update) - Only an admin user can update existing categories.
     * @allow (delete) - Only an admin user can delete categories.
     * @deny (create) - A non-admin user cannot create new categories.
     * @deny (update) - A non-admin user cannot update existing categories.
     * @deny (delete) - A non-admin user cannot delete categories.
     * @principle Public read, admin-only write.
     */
    match /categories/{categoryId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants read access to all for tags, but restricts write access to admins.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user, authenticated or not, can read tag data.
     * @allow (create) - Only an admin user can create new tags.
     * @allow (update) - Only an admin user can update existing tags.
     * @allow (delete) - Only an admin user can delete tags.
     * @deny (create) - A non-admin user cannot create new tags.
     * @deny (update) - A non-admin user cannot update existing tags.
     * @deny (delete) - A non-admin user cannot delete tags.
     * @principle Public read, admin-only write.
     */
    match /tags/{tagId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants read access to all for documents, but restricts write access to admins.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user, authenticated or not, can read document data.
     * @allow (create) - Only an admin user can create new documents.
     * @allow (update) - Only an admin user can update existing documents.
     * @allow (delete) - Only an admin user can delete documents.
     * @deny (create) - A non-admin user cannot create new documents.
     * @deny (update) - A non-admin user cannot update existing documents.
     * @deny (delete) - A non-admin user cannot delete documents.
     * @principle Public read, admin-only write.
     */
    match /documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Grants admin privileges based on the existence of a document in this collection.
      * @path /roles_admin/{userId}
      * @allow (get) - An admin user can read their own admin role document.
      * @allow (create) - An admin user can create their own admin role document.
      * @allow (update) - An admin user can update their own admin role document.
      * @allow (delete) - An admin user can delete their own admin role document.
      *
      * @deny (list) - All users are denied listing the /roles_admin collection.
      * @principle Database-Based Access Control (DBAC).
      */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
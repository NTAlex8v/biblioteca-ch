/**
 * @fileoverview Firestore Security Rules for the virtual library application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user ownership and role-based access control.
 * Users can manage their own data, while admins have broader privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/auditLogs/{logId}: Stores audit logs specific to a user.
 * - /categories/{categoryId}: Stores top-level categories (Admin managed).
 * - /folders/{folderId}: Stores user-created folders.
 * - /tags/{tagId}: Stores tags for documents.
 * - /documents/{documentId}: Stores document metadata.
 * - /auditLogs/{logId}: Stores audit logs for the entire system.
 *
 * Key Security Decisions:
 * - Users can only read their own user documents and audit logs.
 * - Admins can manage categories, tags, and system-wide audit logs.
 * - Folders and documents are accessible to their creators.
 * - Listing of system-wide audit logs is denied to all users due to potential privacy concerns.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by checking the `createdBy` field in documents and folders.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user's ID.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     *  This function combines the ownership check with the existence check.
     * @param {string} userId The user's ID.
     * @return {bool} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Checks if the user has the Admin role.
     * @return {bool} True if the user is an Admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the Editor role.
     * @return {bool} True if the user is an Editor, false otherwise.
     */
    function isEditor() {
      return isSignedIn() && request.auth.token.role == 'Editor';
    }


    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile document with id 'user123'.
     * @deny (create) User with UID 'user123' tries to create profile with ID 'user456'.
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes their own profile.
     * @deny (get, update, delete) User with UID 'user123' tries to read/update/delete profile with ID 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    

      /**
       * @description Rules for audit logs specific to a user.
       * @path /users/{userId}/auditLogs/{logId}
       * @allow (create) User with UID 'user123' creates a log entry in their own audit log.
       * @deny (create) User with UID 'user123' tries to create a log entry in another user's audit log.
       * @allow (get, list) User with UID 'user123' reads their own audit logs.
       * @deny (get, list) User with UID 'user123' tries to read another user's audit logs.
       * @allow (update, delete) User with UID 'user123' tries to update/delete their own audit logs.
       * @deny (update, delete) Users should not be able to edit audit logs
       * @principle Restricts access to a user's own audit log data.
       */
      match /auditLogs/{logId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false; // Audit logs should not be updated.
        allow delete: if false; // Audit logs should not be deleted by users.
      }
    }

    /**
     * @description Rules for categories (Admin-managed).
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read categories.
     * @allow (create, update, delete) Only Admins can manage categories.
     * @principle Requires Admin role for managing categories; allows public reads.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for folders (user-created).
     * @path /folders/{folderId}
     * @allow (get, list) Anyone can read folders.
     * @allow (create) User can create a folder if they are signed in.
     * @allow (update, delete) Only the creator can update/delete a folder.
     * @principle Enforces ownership for folder modifications.
     */
    match /folders/{folderId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for tags (Admin-managed).
     * @path /tags/{tagId}
     * @allow (get, list) Anyone can read tags.
     * @allow (create, update, delete) Only Admins can manage tags.
     * @principle Requires Admin role for managing tags; allows public reads.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) Anyone can read documents.
     * @allow (create) User can create a document if they are signed in, and the createdBy field matches their UID.
     * @allow (update, delete) Only the creator can update/delete a document.
     * @principle Enforces ownership for document modifications.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Rules for system-wide audit logs.
     * @path /auditLogs/{logId}
     * @allow (get) Admins can read system-wide audit logs.
     * @deny (list) No one should be able to list all audit logs.
     * @allow (create) Admins or Editors can create audit logs.
     * @deny (update, delete) Audit logs cannot be updated or deleted.
     * @principle Restricts access to audit log data.
     */
    match /auditLogs/{logId} {
      allow get: if isAdmin();
      allow list: if false; // Deny listing of all audit logs for privacy.
      allow create: if isAdmin() || isEditor();
      allow update: if false; // Audit logs should not be updated.
      allow delete: if false; // Audit logs should not be deleted.
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner, meaning the user is the owner and the resource exists.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the user has admin privileges based on the existence of a document in the roles_admin collection.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces that the ID within the request matches the userId parameter.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} - True if the ID matches, false otherwise.
     */
    function isValidUserId(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the ID within the request matches the existing resource's userId.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} - True if the ID matches, false otherwise.
     */
    function isUserIdImmutable(userId) {
        return request.resource.data.id == resource.data.id;
    }


    /**
     * @description Security rules for user profile data.
     * @path /users/{userId}
     * @allow (create) - User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can create their own profile if their auth UID matches the userId.
     * @allow (get, update, delete) - User '2bIAW4LIstaHXKSSRhr2nRpvKr02' can read, update, or delete their own profile.
     * @deny (list) - Listing all users is forbidden.
     * @deny (create) - User 'attacker' cannot create a profile with userId '2bIAW4LIstaHXKSSRhr2nRpvKr02'.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId} {
      // Only allow creation if the authenticated user's ID matches the userId
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Security rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @allow (create, update, delete) - Only admins can create, update, or delete categories.
     * @deny (create) - Regular user cannot create a category.
     * @principle Public read access with admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Security rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user can read tags.
     * @allow (create, update, delete) - Only admins can create, update, or delete tags.
     * @deny (create) - Regular user cannot create a tag.
     * @principle Public read access with admin-only writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Security rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user can read documents.
     * @allow (create, update, delete) - Only admins can create, update, or delete documents.
     * @deny (create) - Regular user cannot create a document.
     * @principle Public read access with admin-only writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Security rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can create their own admin role entry. This effectively self-grants admin privileges, which is likely incorrect.
     * @allow (get) - Only the user themselves can check if they have admin privileges.
     * @allow (delete) - Only the user themselves can remove their own admin privileges.
     * @deny (list) - Listing admin roles is forbidden.
     * @deny (update) - Admin role documents cannot be updated (only created or deleted).
     * @principle DBAC (Database-Based Access Control). The presence of a document grants administrative privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
      allow list: if false;
    }
  }
}
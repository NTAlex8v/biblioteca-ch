/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model, combining user-based ownership with administrative overrides.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 * - /categories/{categoryId}: Stores categories, publicly readable, but only modifiable by admins.
 * - /folders/{folderId}: Stores folders, readable and modifiable by the creator or admins.
 * - /tags/{tagId}: Stores tags, publicly readable, but only modifiable by admins.
 * - /documents/{documentId}: Stores documents, publicly readable, but only modifiable by the creator.
 * - /auditLogs/{logId}: Stores audit logs, only accessible and modifiable by admins.
 *
 * Key Security Decisions:
 * - Admins have full CRUD access to all collections, overriding individual ownership.
 * - Users can only read and modify their own user documents.
 * - Categories and Tags are publicly readable but only manageable by admins.
 * - Documents are publicly readable, but only the creator can modify or delete them.
 * - Folder access is restricted to the creating user, but admins can manage all folders.
 * - Listing of users is restricted to admins only.
 *
 * Denormalization for Authorization:
 * - Documents and Folders contain a `createdBy` field to denote ownership, enabling rules to quickly check ownership without additional reads.
 * - User documents denormalize the user's `id` to enable path-based ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid))
                .data.role == 'Admin';
    }

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their profile if the ID matches their auth UID.
     * @allow (update) User 'user123' can update their own profile.
     * @allow (delete) User 'user123' can delete their own profile.
     * @allow (list) Admins can list all user profiles.
     * @deny (get) User 'user456' cannot read User 'user123' profile.
     * @deny (create) User 'user123' cannot create a profile with a mismatched ID.
     * @principle Enforces document ownership for writes, admin override for listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      allow create: if (isOwner(userId) && request.resource.data.id == userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Manages top-level categories, only modifiable by admins.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read categories.
     * @allow (list) Any user can list categories.
     * @allow (create) Admins can create categories.
     * @allow (update) Admins can update categories.
     * @allow (delete) Admins can delete categories.
     * @deny (create) Regular users cannot create categories.
     * @deny (update) Regular users cannot update categories.
     * @deny (delete) Regular users cannot delete categories.
     * @principle Public read, admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages user-created folders, with admin override.
     * @path /folders/{folderId}
     *  @allow (get) Authenticated user can read a folder if they created it or if they are an admin.
     *  @allow (list) Authenticated user can list folders.
     *  @allow (create) Authenticated user can create a folder with their UID as the `createdBy`.
     *  @allow (update) The creator or an admin can update a folder.
     *  @allow (delete) The creator or an admin can delete a folder.
     * @deny (create) User cannot create a folder with a different `createdBy` than their UID.
     * @deny (update) A non-creator and non-admin user cannot update a folder.
     * @principle Ownership-based access with admin overrides.
     */
    match /folders/{folderId} {
      allow get: if (isSignedIn() && resource.data.createdBy == request.auth.uid) || isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if (isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy) || isAdmin();
      allow delete: if isExistingOwner(resource.data.createdBy) || isAdmin();
    }

    /**
     * @description Manages tags, only modifiable by admins.
     * @path /tags/{tagId}
     * @allow (get) Any user can read tags.
     * @allow (list) Any user can list tags.
     * @allow (create) Admins can create tags.
     * @allow (update) Admins can update tags.
     * @allow (delete) Admins can delete tags.
     * @deny (create) Regular users cannot create tags.
     * @deny (update) Regular users cannot update tags.
     * @deny (delete) Regular users cannot delete tags.
     * @principle Public read, admin-only writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages documents, publicly readable, owner-only writes.
     * @path /documents/{documentId}
     * @allow (get) Any user can read documents.
     * @allow (list) Any user can list documents.
     * @allow (create) Authenticated user can create a document if the `createdBy` field matches their UID.
     * @allow (update) Only the creator can update the document.
     * @allow (delete) Only the creator can delete the document.
     * @deny (create) User cannot create a document with a different `createdBy` than their UID.
     * @deny (update) A non-creator cannot update a document.
     * @principle Public read, owner-only writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages audit logs, only accessible to admins.
     * @path /auditLogs/{logId}
     * @allow (get) Admins can read audit logs.
     * @allow (list) Admins can list audit logs.
     * @allow (create) Admins can create audit logs.
     * @allow (update) Admins can update audit logs.
     * @allow (delete) Admins can delete audit logs.
     * @deny (get) Regular users cannot read audit logs.
     * @deny (list) Regular users cannot list audit logs.
     * @deny (create) Regular users cannot create audit logs.
     * @deny (update) Regular users cannot update audit logs.
     *  @principle Admin-only access.
     */
    match /auditLogs/{logId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}
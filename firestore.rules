/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a role-based access control model with
 *   ownership restrictions where appropriate. Data is generally private unless
 *   explicitly made public or shared.
 *
 * @data_structure The Firestore database has the following top-level collections:
 *   - /users/{userId}: Stores user profile information, with the document ID
 *     matching the Firebase Auth UID.
 *   - /categories/{categoryId}: Stores categories for organizing documents.
 *   - /tags/{tagId}: Stores tags for cross-classification of documents.
 *   - /documents/{documentId}: Stores the details of each document.
 *   - /roles_admin/{userId}: A collection that determines admin status. If a document exists for the user's ID here, they are an admin.
 *
 * @key_security_decisions
 *   - User listing is denied to prevent information leakage.
 *   - Read-only collections are explicitly marked as such with `allow get, list: if true;`.
 *   - The default security posture is deny all unless explicitly allowed.
 *
 * @denormalization_for_authorization To simplify rules and improve performance,
 *   authorization data (like user roles or membership lists) is denormalized
 *   directly into documents where it is needed.  This avoids costly `get()`
 *   operations in security rules.  For example, admin status is determined by the existence of a document in the `roles_admin` collection with the user's ID.
 *
 * @structural_segregation Private user data and public document data are stored
 *   in separate collections to optimize read access and simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own document.
     * @allow (get, update, delete) Signed-in user accesses their own document.
     * @deny (create) User attempts to create a document with an ID that doesn't match their auth UID.
     * @deny (list) Listing all users.
     * @deny (update, delete) User attempts to modify or delete another user's document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @allow (create) Only admins can create categories.
     * @allow (update, delete) Only admins can update or delete categories.
     * @deny (create, update, delete) Non-admins attempt to create, update, or delete categories.
     * @principle Requires admin privileges for modifications.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @allow (create) Only admins can create tags.
     * @allow (update, delete) Only admins can update or delete tags.
     * @deny (create, update, delete) Non-admins attempt to create, update, or delete tags.
     * @principle Requires admin privileges for modifications.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for documents.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read documents.
     * @allow (create) Only admins can create documents.
     * @allow (update, delete) Only admins can update or delete documents.
     * @deny (create, update, delete) Non-admins attempt to create, update, or delete documents.
     * @principle Requires admin privileges for modifications.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for roles_admin.
     * @path /roles_admin/{userId}
     * @allow (get) Any signed-in user can check if a role exists.
     * @allow (create) Only admins can grant admin roles.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (list) Listing all roles_admin.
     * @deny (create, delete) Non-admins attempt to grant or revoke admin roles.
     * @principle Requires admin privileges for role management.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}